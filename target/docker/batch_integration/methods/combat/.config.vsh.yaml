functionality:
  name: "combat"
  namespace: "batch_integration/methods"
  version: "main_build"
  authors: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "Unintegrated AnnData HDF5 file."
    info:
      short_description: "Unintegrated"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
          required: true
        - type: "double"
          name: "normalized"
          description: "Normalized expression values"
          required: true
        obs:
        - type: "string"
          name: "batch"
          description: "Batch information"
          required: true
        - type: "string"
          name: "label"
          description: "label information"
          required: true
        var:
        - type: "boolean"
          name: "hvg"
          description: "Whether or not the feature is considered to be a 'highly variable\
            \ gene'"
          required: true
        obsm:
        - type: "double"
          name: "X_pca"
          description: "The resulting PCA embedding."
          required: true
        obsp:
        - type: "double"
          name: "knn_connectivities"
          description: "K nearest neighbors connectivities matrix."
          required: true
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
          required: true
        - type: "string"
          name: "normalization_id"
          description: "Which normalization was used"
          required: true
        - type: "string"
          name: "dataset_organism"
          description: "Which normalization was used"
          required: true
    example:
    - "input.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "Integrated AnnData HDF5 file."
    info:
      prediction_type: "feature"
      short_description: "Integrated Feature"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
          required: true
        - type: "double"
          name: "normalized"
          description: "Normalized expression values"
          required: true
        - type: "double"
          name: "corrected_counts"
          description: "Corrected counts after integration"
          required: true
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
          required: true
        - type: "string"
          name: "normalization_id"
          description: "Which normalization was used"
          required: true
        - type: "string"
          name: "dataset_organism"
          description: "Which normalization was used"
          required: true
        - type: "string"
          name: "method_id"
          description: "A unique identifier for the method"
          required: true
        - type: "boolean"
          name: "hvg"
          description: "If the method was done on hvg or full"
          required: true
        - type: "string"
          name: "output_type"
          description: "what kind of output has been generated"
          required: true
        obs:
        - type: "string"
          name: "batch"
          description: "Batch information"
          required: true
        - type: "string"
          name: "label"
          description: "label information"
          required: true
        var:
        - type: "boolean"
          name: "hvg"
          description: "Whether or not the feature is considered to be a 'highly variable\
            \ gene'"
          required: true
        obsm:
        - type: "double"
          name: "X_pca"
          description: "The resulting PCA embedding."
          required: true
        obsp:
        - type: "double"
          name: "knn_connectivities"
          description: "K nearest neighbors connectivities matrix."
          required: true
    example:
    - "input.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "boolean"
    name: "--hvg"
    alternatives: []
    description: "Whether to subset to highly variable genes"
    example: []
    default:
    - false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  argument_groups: []
  resources:
  - type: "python_script"
    path: "script.py"
    is_executable: true
  description: "Adjusting batch effects in microarray expression data using empirical\
    \ Bayes methods"
  test_resources:
  - type: "file"
    path: "../../../../resources_test/batch_integration/pancreas/"
  - type: "python_script"
    text: "import os\nimport subprocess\nimport anndata as ad\n\ninput_path = meta[\"\
      resources_dir\"] + \"/pancreas/unintegrated.h5ad\"\noutput_path = \"integrated.h5ad\"\
      \ncmd = [\n    meta['executable'],\n    \"--input\", input_path,\n    \"--output\"\
      , output_path\n]\n\nprint(\">> Checking whether input file exists\", flush=True)\n\
      assert os.path.exists(input_path)\n\nprint(\">> Running script as test\", flush=True)\n\
      subprocess.run(cmd, check=True)\n\nprint(\">> Checking whether file exists\"\
      , flush=True)\nassert os.path.exists(output_path)\n\nprint(\">> Reading h5ad\
      \ files\", flush=True)\ninput = ad.read_h5ad(input_path)\noutput = ad.read_h5ad(output_path)\n\
      print(f\"input: {input}\", flush=True)\nprint(f\"output: {output}\", flush=True)\n\
      \nprint(\">> Checking whether predictions were added\", flush=True)\n# TODO:\
      \ use helper function to check whether the required fields are defined\nassert\
      \ output.layers['corrected_counts'] is not None\n\nprint(\">> Check values\"\
      , flush=True)\nassert meta['functionality_name'] == output.uns['method_id']\n\
      assert input.uns[\"dataset_id\"] == output.uns[\"dataset_id\"]\n\nprint(\">>\
      \ All tests passed successfully\")"
    dest: "generic_test.py"
    is_executable: true
  info:
    method_name: "Combat"
    paper_reference: "hansen2012removing"
    code_url: "https://scanpy.readthedocs.io/en/stable/api/scanpy.pp.combat.html"
    v1_url: "openproblems/tasks/_batch_integration/batch_integration_graph/methods/combat.py"
    v1_commit: "29803b95c88b4ec5921df2eec7111fd5d1a95daf"
    preferred_normalization: "log_cpm"
    variants:
      combat_hvg_unscaled:
        hvg: true
      combat_full_scaled:
        preferred_normalization: "log_cpm_scaled"
      combat_hvg_scaled:
        hvg: true
        preferred_normalization: "log_cpm_scaled"
    type: "method"
    output_type: "feature"
  status: "enabled"
  requirements:
    commands: []
  set_wd_to_resources_dir: false
platforms:
- type: "docker"
  id: "docker"
  image: "mumichae/scib-base:1.1.3"
  target_organization: "openproblems-bio"
  target_registry: "ghcr.io"
  namespace_separator: "/"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  run_args: []
  target_image_source: "https://github.com/openproblems-bio/openproblems-v2"
  setup:
  - type: "python"
    user: false
    packages: []
    pip: []
    pypi:
    - "pyyaml"
    git: []
    github: []
    gitlab: []
    mercurial: []
    svn: []
    bazaar: []
    url: []
    script: []
    upgrade: true
  test_setup: []
- type: "nextflow"
  id: "nextflow"
  variant: "vdsl3"
  directives:
    accelerator: {}
    conda: []
    containerOptions: []
    label: []
    module: []
    pod: []
    publishDir: []
    queue: []
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: true
    transcript: false
    publish: false
  debug: false
  container: "docker"
info:
  config: "/home/runner/work/openproblems-v2/openproblems-v2/src/batch_integration/methods/combat/config.vsh.yaml"
  platform: "docker"
  output: "/home/runner/work/openproblems-v2/openproblems-v2/target/docker/batch_integration/methods/combat"
  executable: "/home/runner/work/openproblems-v2/openproblems-v2/target/docker/batch_integration/methods/combat/combat"
  viash_version: "0.7.0"
  git_commit: "ebad2c98ddf3f05cd0cf9d272db1e00722625106"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
