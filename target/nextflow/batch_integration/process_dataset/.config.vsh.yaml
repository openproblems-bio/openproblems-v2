functionality:
  name: "process_dataset"
  namespace: "batch_integration"
  version: "main_build"
  authors: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "A normalised data with a PCA embedding, HVG selection and a kNN\
      \ graph"
    info:
      label: "Dataset+PCA+HVG+kNN"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
          required: true
        - type: "double"
          name: "normalized"
          description: "Normalised expression values"
        obs:
        - type: "string"
          name: "celltype"
          description: "Cell type information"
          required: false
        - type: "string"
          name: "batch"
          description: "Batch information"
          required: false
        - type: "string"
          name: "tissue"
          description: "Tissue information"
          required: false
        - type: "double"
          name: "size_factors"
          description: "The size factors created by the normalisation method, if any."
          required: false
        var:
        - type: "boolean"
          name: "hvg"
          description: "Whether or not the feature is considered to be a 'highly variable\
            \ gene'"
          required: true
        - type: "integer"
          name: "hvg_score"
          description: "A ranking of the features by hvg."
          required: true
        obsm:
        - type: "double"
          name: "X_pca"
          description: "The resulting PCA embedding."
          required: true
        obsp:
        - type: "double"
          name: "knn_distances"
          description: "K nearest neighbors distance matrix."
          required: true
        - type: "double"
          name: "knn_connectivities"
          description: "K nearest neighbors connectivities matrix."
          required: true
        varm:
        - type: "double"
          name: "pca_loadings"
          description: "The PCA loadings matrix."
          required: true
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
          required: true
        - type: "string"
          name: "normalization_id"
          description: "Which normalization was used"
          required: true
        - type: "double"
          name: "pca_variance"
          description: "The PCA variance objects."
          required: true
        - type: "object"
          name: "knn"
          description: "Neighbors data."
        - type: "string"
          name: "dataset_organism"
          description: "The organism of the sample in the dataset."
          required: true
    example:
    - "dataset.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "Unintegrated AnnData HDF5 file."
    info:
      short_description: "Unintegrated"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
          required: true
        - type: "double"
          name: "normalized"
          description: "Normalized expression values"
          required: true
        obs:
        - type: "string"
          name: "batch"
          description: "Batch information"
          required: true
        - type: "string"
          name: "label"
          description: "label information"
          required: true
        var:
        - type: "boolean"
          name: "hvg"
          description: "Whether or not the feature is considered to be a 'highly variable\
            \ gene'"
          required: true
        obsm:
        - type: "double"
          name: "X_pca"
          description: "The resulting PCA embedding."
          required: true
        obsp:
        - type: "double"
          name: "knn_connectivities"
          description: "K nearest neighbors connectivities matrix."
          required: true
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
          required: true
        - type: "string"
          name: "normalization_id"
          description: "Which normalization was used"
          required: true
        - type: "string"
          name: "dataset_organism"
          description: "Which normalization was used"
          required: true
    example:
    - "input.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "string"
    name: "--obs_label"
    alternatives: []
    description: "Which .obs slot to use as label."
    example: []
    default:
    - "celltype"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "string"
    name: "--obs_batch"
    alternatives: []
    description: "Which .obs slot to use as batch covariate."
    example: []
    default:
    - "batch"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "integer"
    name: "--hvgs"
    alternatives: []
    description: "Number of highly variable genes"
    example: []
    default:
    - 2000
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  argument_groups: []
  resources:
  - type: "python_script"
    path: "script.py"
    is_executable: true
  description: "Preprocess adata object for data integration"
  test_resources:
  - type: "file"
    path: "../../../resources_test/common/pancreas/"
  - type: "python_script"
    text: "import anndata as ad\nimport subprocess\nfrom os import path\n\ninput_path\
      \ = meta[\"resources_dir\"] + \"/pancreas/dataset.h5ad\"\noutput_unintegrated_path\
      \ = \"unintegrated.h5ad\"\ncmd = [\n    meta['executable'],\n    \"--input\"\
      , input_path,\n    \"--output\", output_unintegrated_path\n]\n\nprint(\">> Checking\
      \ whether input file exists\", flush=True)\nassert path.exists(input_path)\n\
      \nprint(\">> Running script as test\", flush=True)\nout = subprocess.run(cmd,\
      \ stderr=subprocess.STDOUT).stdout\nprint(out)\n\nprint(\">> Checking whether\
      \ output files exist\", flush=True)\nassert path.exists(output_unintegrated_path)\n\
      \nprint(\">> Reading h5ad files\", flush=True)\ninput = ad.read_h5ad(input_path)\n\
      output_unintegrated = ad.read_h5ad(output_unintegrated_path)\n\nprint(\"input:\"\
      , input, flush=True)\nprint(\"output_unintegrated:\", output_unintegrated, flush=True)\n\
      \nprint(\">> Checking whether data from input was copied properly to output\"\
      , flush=True)\nassert input.n_obs == output_unintegrated.n_obs \nassert input.uns[\"\
      dataset_id\"] == output_unintegrated.uns[\"dataset_id\"] \n\n\nprint(\">> Check\
      \ whether certain slots exist\", flush=True)\nassert \"counts\" in output_unintegrated.layers\n\
      assert \"normalized\" in output_unintegrated.layers\nassert 'hvg' in output_unintegrated.var\n\
      \nprint(\"All checks succeeded!\", flush=True)"
    dest: "generic_test.py"
    is_executable: true
  - type: "python_script"
    path: "test.py"
    is_executable: true
  - type: "file"
    path: "../../../resources_test/common/pancreas/"
  info:
    type: "process_dataset"
  status: "enabled"
  requirements:
    commands: []
  set_wd_to_resources_dir: false
platforms:
- type: "docker"
  id: "docker"
  image: "mumichae/scib-base:1.1.3"
  target_organization: "openproblems-bio"
  target_registry: "ghcr.io"
  namespace_separator: "/"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  run_args: []
  target_image_source: "https://github.com/openproblems-bio/openproblems-v2"
  setup:
  - type: "python"
    user: false
    packages: []
    pip: []
    pypi:
    - "pyyaml"
    git: []
    github: []
    gitlab: []
    mercurial: []
    svn: []
    bazaar: []
    url: []
    script: []
    upgrade: true
  test_setup: []
- type: "nextflow"
  id: "nextflow"
  variant: "vdsl3"
  directives:
    accelerator: {}
    conda: []
    containerOptions: []
    label: []
    module: []
    pod: []
    publishDir: []
    queue: []
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: true
    transcript: false
    publish: false
  debug: false
  container: "docker"
info:
  config: "/home/runner/work/openproblems-v2/openproblems-v2/src/batch_integration/process_dataset/config.vsh.yaml"
  platform: "nextflow"
  output: "/home/runner/work/openproblems-v2/openproblems-v2/target/nextflow/batch_integration/process_dataset"
  executable: "/home/runner/work/openproblems-v2/openproblems-v2/target/nextflow/batch_integration/process_dataset/process_dataset"
  viash_version: "0.7.0"
  git_commit: "447e502f1a2e8285b02fa891ddac2803baffa632"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
