functionality:
  name: "sync_test_resources"
  namespace: "common"
  version: "main_build"
  authors:
  - name: "Robrecht Cannoodt"
    email: "rcannood@gmail.com"
    roles:
    - "maintainer"
    props:
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
  inputs: []
  outputs: []
  arguments:
  - type: "string"
    name: "--input"
    alternatives:
    - "-i"
    description: "Path to the S3 bucket to sync from."
    example: []
    default:
    - "s3://openproblems-data"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    description: "Path to the test resource directory."
    example: []
    default:
    - "resources_test"
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "boolean_true"
    name: "--quiet"
    alternatives: []
    description: "Displays the operations that would be performed using the specified\
      \ command without actually running them."
    direction: "input"
  - type: "boolean_true"
    name: "--dryrun"
    alternatives: []
    description: "Does not display the operations performed from the specified command."
    direction: "input"
  - type: "boolean_true"
    name: "--delete"
    alternatives: []
    description: "Files that exist in the destination but not in the source are deleted\
      \ during sync."
    direction: "input"
  - type: "string"
    name: "--exclude"
    alternatives: []
    description: "Exclude all files or objects from the command that matches the specified\
      \ pattern."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: true
    multiple_sep: ":"
  argument_groups: []
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # sync_test_resources main_build
      # 
      # This wrapper script is auto-generated by viash 0.5.15 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      # 
      # Component authors:
      #  * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid:
      # 0000-0003-3641-729X}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TEMP}
        VIASH_TEMP=${VIASH_TEMP:-/tmp}
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="sync_test_resources"
      VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "sync_test_resources main_build"
        echo ""
        echo "Synchronise the test resources from s3 to resources_test"
        echo ""
        echo "Usage:"
        echo "sync_test_resources"
        echo "sync_test_resources --input s3://openproblems-data --output resources_test"
        echo ""
        echo "Arguments:"
        echo "    -i, --input"
        echo "        type: string"
        echo "        default: s3://openproblems-data"
        echo "        Path to the S3 bucket to sync from."
        echo ""
        echo "    -o, --output"
        echo "        type: file, output"
        echo "        default: resources_test"
        echo "        Path to the test resource directory."
        echo ""
        echo "    --quiet"
        echo "        type: boolean_true"
        echo "        Displays the operations that would be performed using the specified"
        echo "        command without actually running them."
        echo ""
        echo "    --dryrun"
        echo "        type: boolean_true"
        echo "        Does not display the operations performed from the specified command."
        echo ""
        echo "    --delete"
        echo "        type: boolean_true"
        echo "        Files that exist in the destination but not in the source are deleted"
        echo "        during sync."
        echo ""
        echo "    --exclude"
        echo "        type: string, multiple values allowed"
        echo "        Exclude all files or objects from the command that matches the specified"
        echo "        pattern."
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "sync_test_resources main_build"
                  exit
                  ;;
              --input)
                  VIASH_PAR_INPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --input=*)
                  VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -i)
                  VIASH_PAR_INPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -i. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -o)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --quiet)
                  VIASH_PAR_QUIET=true
                  shift 1
                  ;;
              --dryrun)
                  VIASH_PAR_DRYRUN=true
                  shift 1
                  ;;
              --delete)
                  VIASH_PAR_DELETE=true
                  shift 1
                  ;;
              --exclude)
                  if [ -z "$VIASH_PAR_EXCLUDE" ]; then
                    VIASH_PAR_EXCLUDE="$2"
                  else
                    VIASH_PAR_EXCLUDE="$VIASH_PAR_EXCLUDE:""$2"
                  fi
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --exclude. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --exclude=*)
                  if [ -z "$VIASH_PAR_EXCLUDE" ]; then
                    VIASH_PAR_EXCLUDE=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_EXCLUDE="$VIASH_PAR_EXCLUDE:"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      
      if [ -z "$VIASH_PAR_INPUT" ]; then
        VIASH_PAR_INPUT="s3://openproblems-data"
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        VIASH_PAR_OUTPUT="resources_test"
      fi
      if [ -z "$VIASH_PAR_QUIET" ]; then
        VIASH_PAR_QUIET="false"
      fi
      if [ -z "$VIASH_PAR_DRYRUN" ]; then
        VIASH_PAR_DRYRUN="false"
      fi
      if [ -z "$VIASH_PAR_DELETE" ]; then
        VIASH_PAR_DELETE="false"
      fi
      
      
      # check whether parameters values are of the right type
      
      
      if [[ -n "$VIASH_PAR_QUIET" ]]; then
        if ! [[ "$VIASH_PAR_QUIET" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
          ViashError '--quiet' has to be a boolean_true. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_DRYRUN" ]]; then
        if ! [[ "$VIASH_PAR_DRYRUN" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
          ViashError '--dryrun' has to be a boolean_true. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_DELETE" ]]; then
        if ! [[ "$VIASH_PAR_DELETE" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
          ViashError '--delete' has to be a boolean_true. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      
      
      cat << VIASHEOF | bash
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-sync_test_resources-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      
      #!/bin/bash
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "par_input='${VIASH_PAR_INPUT//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "par_output='${VIASH_PAR_OUTPUT//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_QUIET+x} ]; then echo "par_quiet='${VIASH_PAR_QUIET//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_DRYRUN+x} ]; then echo "par_dryrun='${VIASH_PAR_DRYRUN//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_DELETE+x} ]; then echo "par_delete='${VIASH_PAR_DELETE//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_EXCLUDE+x} ]; then echo "par_exclude='${VIASH_PAR_EXCLUDE//\'/\'\"\'\"\'}'"; fi )
      meta_functionality_name='$VIASH_META_FUNCTIONALITY_NAME'
      meta_resources_dir='$VIASH_META_RESOURCES_DIR'
      meta_executable='$VIASH_META_EXECUTABLE'
      meta_temp_dir='$VIASH_TEMP'
      resources_dir="$VIASH_META_RESOURCES_DIR"
      
      ## VIASH END
      
      extra_params=( )
      
      if [ "\$par_quiet" == "true" ]; then
        extra_params+=( "--quiet" )
      fi
      if [ "\$par_dryrun" == "true" ]; then
        extra_params+=( "--dryrun" )
      fi
      if [ "\$par_delete" == "true" ]; then
        extra_params+=( "--delete" )
      fi
      
      if [ ! -z \${par_exclude+x} ]; then
        IFS=":"
        for var in \$par_exclude; do
          unset IFS
          extra_params+=( "--exclude" "\$var" )
        done
      fi
      
      
      # Disable the use of the Amazon EC2 instance metadata service (IMDS).
      # see https://florian.ec/blog/github-actions-awscli-errors/
      # or https://github.com/aws/aws-cli/issues/5234#issuecomment-705831465
      export AWS_EC2_METADATA_DISABLED=true
      
      aws s3 sync "\$par_input" "\$par_output" --no-sign-request "\${extra_params[@]}"
      
      VIASHMAIN
      bash "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "sync_test_resources"
    is_executable: true
  description: "Synchronise the test resources from s3 to resources_test"
  usage: "sync_test_resources\nsync_test_resources --input s3://openproblems-data\
    \ --output resources_test\n"
  test_resources:
  - type: "bash_script"
    path: "run_test.sh"
    is_executable: true
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
  enabled: true
platform:
  type: "native"
  id: "native"
platforms: []
info:
  config: "src/common/sync_test_resources/config.vsh.yaml"
  platform: "native"
  output: "target/native/common/sync_test_resources"
  executable: "target/native/common/sync_test_resources/sync_test_resources"
  viash_version: "0.5.15"
  git_commit: "2770b1bfb69869660836b0a69bee7723b48c676e"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
