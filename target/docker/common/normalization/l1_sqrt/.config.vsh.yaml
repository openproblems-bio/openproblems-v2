functionality:
  name: "l1_sqrt"
  namespace: "common/normalization"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "An unprocessed dataset as output by a dataset loader."
    info:
      label: "Raw dataset"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
          required: true
        obs:
        - type: "string"
          name: "celltype"
          description: "Cell type information"
          required: false
        - type: "string"
          name: "batch"
          description: "Batch information"
          required: false
        - type: "string"
          name: "tissue"
          description: "Tissue information"
          required: false
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
          required: true
    example:
    - "raw_dataset.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "A normalized dataset"
    info:
      label: "Normalized dataset"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
          required: true
        - type: "double"
          name: "normalized"
          description: "Normalised expression values"
        obs:
        - type: "string"
          name: "celltype"
          description: "Cell type information"
          required: false
        - type: "string"
          name: "batch"
          description: "Batch information"
          required: false
        - type: "string"
          name: "tissue"
          description: "Tissue information"
          required: false
        - type: "double"
          name: "size_factors"
          description: "The size factors created by the normalisation method, if any."
          required: false
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
          required: true
        - type: "string"
          name: "normalization_id"
          description: "Which normalization was used"
          required: true
    example:
    - "dataset.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "string"
    name: "--layer_output"
    alternatives: []
    description: "The name of the layer in which to store the normalized data."
    example: []
    default:
    - "normalized"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "string"
    name: "--obs_size_factors"
    alternatives: []
    description: "In which .obs slot to store the size factors (if any)."
    example: []
    default:
    - "size_factors"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  argument_groups: []
  resources:
  - type: "python_script"
    path: "script.py"
    is_executable: true
  description: "Scaled L1 sqrt normalization.\n\nThis normalization method causes\
    \ all cells to have the same sum of values.\n\nSteps:\n\n* Compute the square\
    \ root of the counts.\n* Apply L1 normalization (rescaled such that the sum of\
    \ the values of each cell sum to 1).\n* Multiply by the median UMI count per cell,\
    \ causing all cells to have the sum of values.\n"
  test_resources:
  - type: "python_script"
    text: "import anndata as ad\nimport subprocess\nfrom os import path\n\ninput_path\
      \ = meta[\"resources_dir\"] + \"/pancreas/dataset.h5ad\"\noutput_path = \"output.h5ad\"\
      \noutput_layer = \"norm_layer\"\n\ncmd = [\n  meta['executable'],\n  \"--input\"\
      , input_path,\n  \"--output\", output_path,\n  \"--layer_output\", output_layer\n\
      ]\n\nprint(\">> Running script as test\")\nout = subprocess.check_output(cmd).decode(\"\
      utf-8\")\n\nprint(\">> Checking whether output file exists\")\nassert path.exists(output_path)\n\
      \nprint(\">> Reading h5ad files\")\ninput = ad.read_h5ad(input_path)\noutput\
      \ = ad.read_h5ad(output_path)\nprint(\"input:\", input)\nprint(\"output:\",\
      \ output)\n\nprint(\">> Checking whether output data structures were added\"\
      )\nassert output_layer in output.layers\n\nprint(\"Checking whether data from\
      \ input was copied properly to output\")\nassert input.n_obs == output.n_obs\n\
      assert input.uns[\"dataset_id\"] == output.uns[\"dataset_id\"]\n\nprint(\"All\
      \ checks succeeded!\")\n"
    dest: "generic_test.py"
    is_executable: true
  - type: "file"
    path: "../../../../resources_test/common/pancreas"
  status: "enabled"
  requirements:
    commands: []
  set_wd_to_resources_dir: false
platforms:
- type: "docker"
  id: "docker"
  image: "python:3.10"
  target_organization: "openproblems-bio"
  target_registry: "ghcr.io"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  run_args: []
  target_image_source: "https://github.com/openproblems-bio/openproblems-v2"
  setup:
  - type: "python"
    user: false
    packages:
    - "scprep"
    - "anndata>=0.8"
    - "numpy"
    pip: []
    pypi: []
    git: []
    github: []
    gitlab: []
    mercurial: []
    svn: []
    bazaar: []
    url: []
    script: []
    upgrade: true
  test_setup: []
- type: "nextflow"
  id: "nextflow"
  variant: "vdsl3"
  directives:
    accelerator: {}
    conda: []
    containerOptions: []
    label:
    - "lowmem"
    - "lowcpu"
    module: []
    pod: []
    publishDir: []
    queue: []
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: true
    transcript: false
    publish: false
  debug: false
  container: "docker"
info:
  config: "/home/runner/work/openproblems-v2/openproblems-v2/src/datasets/normalization/l1_sqrt/config.vsh.yaml"
  platform: "docker"
  output: "/home/runner/work/openproblems-v2/openproblems-v2/target/docker/common/normalization/l1_sqrt"
  executable: "/home/runner/work/openproblems-v2/openproblems-v2/target/docker/common/normalization/l1_sqrt/l1_sqrt"
  viash_version: "0.6.7"
  git_commit: "451c79d23329a91cca1308357d427992edd20e52"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
