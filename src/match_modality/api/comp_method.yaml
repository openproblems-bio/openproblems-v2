functionality:
  arguments:
    - name: "--input_train_mod1"
      __merge__: anndata_masked_mod.yaml
    - name: "--input_train_mod2"
      __merge__: anndata_masked_mod.yaml
    - name: "--input_train_sol"
      __merge__: anndata_solution.yaml
    - name: "--input_test_mod1"
      __merge__: anndata_masked_mod.yaml
    - name: "--input_test_mod2"
      __merge__: anndata_masked_mod.yaml
    - name: "--output"
      __merge__: anndata_prediction.yaml
  test_resources:
    - path: ../../../../output   
    - type: python_script
      path: generic_test.py
      text: |
        from os import path
        import subprocess
        import anndata as ad
        import numpy as np
        from scipy.sparse import issparse

        # define some filenames
        testpar = {
            'input_train_mod1': 'output/output_train_mod1.h5ad',
            'input_train_mod2': 'output/output_train_mod2.h5ad',
            'input_train_sol': 'output/output_train_sol.h5ad',
            'input_test_mod1': 'output/output_test_mod1.h5ad',
            'input_test_mod2': 'output/output_test_mod2.h5ad',
            'input_test_sol': 'output/output_test_sol.h5ad',
            'output': 'output/output_prediction.h5ad',
        }

        print('> Running method', flush=True)
        out = subprocess.run([
            meta['executable'],
            '--input_train_mod1', testpar['input_train_mod1'],
            '--input_train_mod2', testpar['input_train_mod2'],
            '--input_train_sol', testpar['input_train_sol'],
            '--input_test_mod1', testpar['input_test_mod1'],
            '--input_test_mod2', testpar['input_test_mod2'],
            '--output', testpar['output']
          ],
          check=True,
          capture_output= True,
          text= True
        )

        # for troubleshooting: remove 'check=True' in subprocess.run above and comment out below print
        # print(out.stderr, flush=True)

        print('> Checking whether output files were created', flush=True)
        assert path.exists(testpar['output'])

        print('> Reading h5ad files', flush=True)
        ad_sol = ad.read_h5ad(testpar['input_test_sol'])
        ad_pred = ad.read_h5ad(testpar['output'])

        print('> Checking dataset id', flush=True)
        assert ad_pred.uns['dataset_id'] == ad_sol.uns['dataset_id']

        print('> Checking method id', flush=True)
        assert ad_pred.uns['method_id'] == meta['functionality_name']

        print('> Checking X', flush=True)
        assert issparse(ad_pred.X)
        assert np.all([x >= 0 for x in ad_pred.X.nonzero()]), 'Values must be strictly non-negative.'
        assert ad_pred.X.nonzero()[0].size <= 1000 * ad_sol.n_obs
        assert ad_pred.n_obs == ad_sol.n_obs
        assert ad_pred.n_vars == ad_sol.n_vars
        assert np.isclose(ad_pred.X.sum(axis=1), 1, atol=1e-10).all(), 'All rows should sum to 1.'

        print('> Test succeeded!', flush=True)
