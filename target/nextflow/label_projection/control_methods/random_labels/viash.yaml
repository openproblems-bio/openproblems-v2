functionality:
  name: "random_labels"
  namespace: "label_projection/control_methods"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input_train"
    alternatives: []
    description: "The training data"
    info:
      short_description: "Training data"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        - type: "double"
          name: "log_cpm"
          description: "CPM normalized counts, log transformed"
        - type: "double"
          name: "log_scran_pooling"
          description: "Scran pooling normalized counts, log transformed"
        - type: "double"
          name: "sqrt_cpm"
          description: "CPM normalized counts, sqrt transformed"
        obs:
        - type: "string"
          name: "label"
          description: "Ground truth cell type labels"
        - type: "string"
          name: "batch"
          description: "Batch information"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
    example:
    - "training.h5ad"
    default: []
    must_exist: false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--input_test"
    alternatives: []
    description: "The test data (without labels)"
    info:
      short_description: "Test data"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        - type: "double"
          name: "log_cpm"
          description: "CPM normalized counts, log transformed"
        - type: "double"
          name: "log_scran_pooling"
          description: "Scran pooling normalized counts, log transformed"
        - type: "double"
          name: "sqrt_cpm"
          description: "CPM normalized counts, sqrt transformed"
        obs:
        - type: "string"
          name: "batch"
          description: "Batch information"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
    example:
    - "test.h5ad"
    default: []
    must_exist: false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "The prediction file"
    info:
      short_description: "Prediction"
      slots:
        obs:
        - type: "string"
          name: "label_pred"
          description: "Predicted labels for the test cells."
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
        - type: "string"
          name: "method_id"
          description: "A unique identifier for the method"
    example:
    - "prediction.h5ad"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "string"
    name: "--layer_input"
    alternatives: []
    description: "Which layer to use as input."
    example: []
    default:
    - "counts"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  argument_groups: []
  resources:
  - type: "python_script"
    path: "script.py"
    is_executable: true
  description: "Negative control method which generates random labels"
  test_resources:
  - type: "file"
    path: "../../../../resources_test/label_projection/pancreas"
  - type: "python_script"
    text: "import anndata as ad\nimport subprocess\nfrom os import path\n\ninput_train_path\
      \ = meta[\"resources_dir\"] + \"/pancreas/train.h5ad\"\ninput_test_path = meta[\"\
      resources_dir\"] + \"/pancreas/test.h5ad\"\ninput_solution_path = meta[\"resources_dir\"\
      ] + \"/pancreas/solution.h5ad\"\noutput_path = \"output.h5ad\"\n\ncmd = [\n\
      \  meta['executable'],\n  \"--input_train\", input_train_path,\n  \"--input_test\"\
      , input_test_path,\n  \"--output\", output_path\n]\n\n# todo: if we could access\
      \ the viash config, we could check whether\n# .functionality.info.type == \"\
      positive_control\"\nif meta['functionality_name'] == 'true_labels':\n  cmd =\
      \ cmd + [\"--input_solution\", input_solution_path]\n\nprint(\">> Running script\
      \ as test\")\nout = subprocess.check_output(cmd).decode(\"utf-8\")\n\nprint(\"\
      >> Checking whether output file exists\")\nassert path.exists(output_path)\n\
      \nprint(\">> Reading h5ad files\")\ninput_test = ad.read_h5ad(input_test_path)\n\
      output = ad.read_h5ad(output_path)\nprint(\"input_test:\", input_test)\nprint(\"\
      output:\", output)\n\nprint(\">> Checking whether predictions were added\")\n\
      assert \"label_pred\" in output.obs\nassert meta['functionality_name'] == output.uns[\"\
      method_id\"]\n\nprint(\"Checking whether data from input was copied properly\
      \ to output\")\nassert input_test.n_obs == output.n_obs\nassert input_test.uns[\"\
      dataset_id\"] == output.uns[\"dataset_id\"]\n\nprint(\"All checks succeeded!\"\
      )"
    dest: "generic_test.py"
    is_executable: true
  info:
    type: "negative_control"
    label: "Random Labels"
    v1_url: "openproblems/tasks/label_projection/methods/baseline.py"
    v1_commit: "b460ecb183328c857cbbf653488f522a4034a61c"
  status: "enabled"
  requirements:
    commands: []
  set_wd_to_resources_dir: false
platforms: []
info:
  config: "src/label_projection/control_methods/random_labels/config.vsh.yaml"
  platform: "nextflow"
  output: "target/nextflow/label_projection/control_methods/random_labels"
  viash_version: "0.6.4"
  git_commit: "d3b8232e9b7a29b3eb8e13a5865a209c8badeea1"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
