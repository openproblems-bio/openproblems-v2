$schema: https://json-schema.org/draft-07/schema#
description: A schema for Viash config files
definitions:
  Functionality:
    description: |
      The functionality-part of the config file describes the behaviour of the script in terms of arguments and resources.
      By specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you.
    type: object
    properties:
      name:
        description: Name of the component and the filename of the executable when built with `viash build`.
        type: string
      enabled:
        description: Setting this to false with disable this component when using namespaces.
        type: boolean
      tests:
        description: One or more Bash/R/Python scripts to be used to test the component behaviour when `viash test` is invoked. Additional files of type `file` will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code >0 when unexpected behaviour occurs during testing.
        type: array
        items:
          $ref: '#/definitions/Resource'
      info:
        description: 'Structured information. Can be any shape: a string, vector, map or even nested map.'
        type: object
      version:
        description: Version of the component. This field will be used to version the executable and the Docker container.
        type: string
      inputs:
        description: A list of input arguments in addition to the `arguments` list. Any arguments specified here will have their `type` set to `file` and the `direction` set to `input` by default.
        type: array
        items:
          $ref: '#/definitions/Argument'
      authors:
        description: "A list of @[authors](author). An author must at least have a name, but can also have a list of roles, an e-mail address, and a map of custom properties.\n\nSuggested values for roles are:\n \n| Role | Abbrev. | Description |\n|------|---------|-------------|\n| maintainer | mnt | for the maintainer of the code. Ideally, exactly one maintainer is specified. |\n| author | aut | for persons who have made substantial contributions to the software. |\n| contributor | ctb| for persons who have made smaller contributions (such as code patches).\n| datacontributor | dtc | for persons or organisations that contributed data sets for the software\n| copyrightholder | cph | for all copyright holders. This is a legal concept so should use the legal name of an institution or corporate body.\n| funder | fnd | for persons or organizations that furnished financial support for the development of the software\n\nThe [full list of roles](https://www.loc.gov/marc/relators/relaterm.html) is extremely comprehensive.\n"
        type: array
        items:
          $ref: '#/definitions/Author'
      status:
        description: Allows setting a component to active, deprecated or disabled.
        $ref: '#/definitions/Status'
      requirements:
        description: "@[Computational requirements](computational_requirements) related to running the component. \n`cpus` specifies the maximum number of (logical) cpus a component is allowed to use., whereas\n`memory` specifies the maximum amount of memory a component is allowed to allicate. Memory units must be\nin B, KB, MB, GB, TB or PB."
        $ref: '#/definitions/ComputationalRequirements'
      resources:
        description: |
          @[Resources](resources) are files that support the component. The first resource should be @[a script](scripting_languages) that will be executed when the functionality is run. Additional resources will be copied to the same directory.

          Common properties:

           * type: `file` / `r_script` / `python_script` / `bash_script` / `javascript_script` / `scala_script` / `csharp_script`, specifies the type of the resource. The first resource cannot be of type `file`. When the type is not specified, the default type is simply `file`.
           * dest: filename, the resulting name of the resource.  From within a script, the file can be accessed at `meta["resources_dir"] + "/" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.
           * path: `path/to/file`, the path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.
           * text: ...multiline text..., the content of the resulting file specified as a string. Mutually exclusive with `path`.
           * is_executable: `true` / `false`, whether the resulting resource file should be made executable.
        type: array
        items:
          $ref: '#/definitions/Resource'
      test_resources:
        description: One or more @[scripts](scripting_languages) to be used to test the component behaviour when `viash test` is invoked. Additional files of type `file` will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code >0 when unexpected behaviour occurs during testing. See @[Unit Testing](unit_testing) for more info.
        type: array
        items:
          $ref: '#/definitions/Resource'
      argument_groups:
        description: "A grouping of the @[arguments](argument), used to display the help message.\n\n - `name: foo`, the name of the argument group. \n - `description: Description of foo`, a description of the argument group. Multiline descriptions are supported.\n - `arguments: [arg1, arg2, ...]`, list of the arguments names.\n\n"
        type: array
        items:
          $ref: '#/definitions/ArgumentGroup'
      description:
        description: A description of the component. This will be displayed with `--help`.
        type: string
      usage:
        description: A description on how to use the component. This will be displayed with `--help` under the 'Usage:' section.
        type: string
      add_resources_to_path:
        description: Adds the resources directory to the PATH variable when set to true. This is set to false by default.
        type: boolean
      outputs:
        description: A list of output arguments in addition to the `arguments` list. Any arguments specified here will have their `type` set to `file` and thr `direction` set to `output` by default.
        type: array
        items:
          $ref: '#/definitions/Argument'
      namespace:
        description: Namespace this component is a part of. See the @[Namespaces guide](namespace) for more information on namespaces.
        type: string
      arguments:
        description: "A list of @[arguments](argument) for this component. For each argument, a type and a name must be specified. Depending on the type of argument, different properties can be set. See these reference pages per type for more information:  \n\n - @[string](arg_string)\n - @[file](arg_file)\n - @[integer](arg_integer)\n - @[double](arg_double)\n - @[boolean](arg_boolean)\n - @[boolean_true](arg_boolean_true)\n - @[boolean_false](arg_boolean_false)\n"
        type: array
        items:
          $ref: '#/definitions/Argument'
    additionalProperties: false
  NativePlatform:
    description: |
      Running a Viash component on a native platform means that the script will be executed in your current environment.
      Any dependencies are assumed to have been installed by the user, so the native platform is meant for developers (who know what they're doing) or for simple bash scripts (which have no extra dependencies).
    type: object
    properties:
      id:
        description: 'As with all platforms, you can give a platform a different name. By specifying `id: foo`, you can target this platform (only) by specifying `-p foo` in any of the Viash commands.'
        type: string
      type:
        description: |
          Running a Viash component on a native platform means that the script will be executed in your current environment.
          Any dependencies are assumed to have been installed by the user, so the native platform is meant for developers (who know what they're doing) or for simple bash scripts (which have no extra dependencies).
        const: native
    additionalProperties: false
  DockerPlatform:
    description: |
      Run a Viash component on a Docker backend platform.
      By specifying which dependencies your component needs, users will be able to build a docker container from scratch using the setup flag, or pull it from a docker repository.
    type: object
    properties:
      organization:
        description: Name of a container's [organization](https://docs.docker.com/docker-hub/orgs/).
        type: string
      registry:
        description: The URL to the a [custom Docker registry](https://docs.docker.com/registry/)
        type: string
      image:
        description: The base container to start from. You can also add the tag here if you wish.
        type: string
      tag:
        description: Specify a Docker image based on its tag.
        type: string
      target_tag:
        description: The tag the resulting image gets. Advanced usage only.
        type: string
      run_args:
        anyOf:
          - description: Add [docker run](https://docs.docker.com/engine/reference/run/) arguments.
            type: string
          - description: Add [docker run](https://docs.docker.com/engine/reference/run/) arguments.
            type: array
            items:
              type: string
      namespace_separator:
        description: 'The separator between the namespace and the name of the component, used for determining the image name. Default: `"/"`.'
        type: string
      resolve_volume:
        description: 'Enables or disables automatic volume mapping. Enabled when set to `Automatic` or disabled when set to `Manual`. Default: `Automatic`.'
        $ref: '#/definitions/DockerResolveVolume'
      port:
        anyOf:
          - description: A list of enabled ports. This doesn't change the Dockerfile but gets added as a command-line argument at runtime.
            type: string
          - description: A list of enabled ports. This doesn't change the Dockerfile but gets added as a command-line argument at runtime.
            type: array
            items:
              type: string
      python:
        description: Specify which Python packages should be available in order to run the component.
        $ref: '#/definitions/PythonRequirements'
      setup:
        description: |
          A list of requirements for installing the following types of packages:

           - @[apt](apt_req)
           - @[apk](apk_req)
           - @[Docker setup instructions](docker_req)
           - @[JavaScript](javascript_req)
           - @[Python](python_req)
           - @[R](r_req)
           - @[Ruby](ruby_req)
           - @[yum](yum_req)

          The order in which these dependencies are specified determines the order in which they will be installed.
        type: array
        items:
          $ref: '#/definitions/Requirements'
      workdir:
        description: The working directory when starting the container. This doesn't change the Dockerfile but gets added as a command-line argument at runtime.
        type: string
      apk:
        description: Specify which apk packages should be available in order to run the component.
        $ref: '#/definitions/ApkRequirements'
      target_image:
        description: If anything is specified in the setup section, running the `---setup` will result in an image with the name of `<target_image>:<version>`. If nothing is specified in the `setup` section, simply `image` will be used. Advanced usage only.
        type: string
      cmd:
        anyOf:
          - description: Set the default command being executed when running the Docker container.
            type: string
          - description: Set the default command being executed when running the Docker container.
            type: array
            items:
              type: string
      yum:
        description: Specify which yum packages should be available in order to run the component.
        $ref: '#/definitions/YumRequirements'
      target_image_source:
        description: The source of the target image. This is used for defining labels in the dockerfile.
        type: string
      test_setup:
        description: Additional requirements specific for running unit tests.
        type: array
        items:
          $ref: '#/definitions/Requirements'
      entrypoint:
        anyOf:
          - description: Override the entrypoint of the base container. Default set `ENTRYPOINT []`.
            type: string
          - description: Override the entrypoint of the base container. Default set `ENTRYPOINT []`.
            type: array
            items:
              type: string
      docker:
        description: Specify which Docker commands should be run during setup.
        $ref: '#/definitions/DockerRequirements'
      id:
        description: 'As with all platforms, you can give a platform a different name. By specifying `id: foo`, you can target this platform (only) by specifying `-p foo` in any of the Viash commands.'
        type: string
      apt:
        description: Specify which apt packages should be available in order to run the component.
        $ref: '#/definitions/AptRequirements'
      target_registry:
        description: The URL where the resulting image will be pushed to. Advanced usage only.
        type: string
      privileged:
        description: Adds a `privileged` flag to the docker run.
        type: boolean
      setup_strategy:
        description: |+
          The Docker setup strategy to use when building a container.

          | Strategy | Description |
          |-----|----------|
          | `alwaysbuild` / `build` / `b` | Always build the image from the dockerfile. This is the default setup strategy.
          | `alwayscachedbuild` / `cachedbuild` / `cb` | Always build the image from the dockerfile, with caching enabled.
          | `ifneedbebuild` |  Build the image if it does not exist locally.
          | `ifneedbecachedbuild` | Build the image with caching enabled if it does not exist locally, with caching enabled.
          | `alwayspull` / `pull` / `p` |  Try to pull the container from [Docker Hub](https://hub.docker.com) or the @[specified docker registry](docker_registry).
          | `alwayspullelsebuild` / `pullelsebuild` |  Try to pull the image from a registry and build it if it doesn't exist.
          | `alwayspullelsecachedbuild` / `pullelsecachedbuild` |  Try to pull the image from a registry and build it with caching if it doesn't exist.
          | `ifneedbepull` |  If the image does not exist locally, pull the image.
          | `ifneedbepullelsebuild` |  If the image does not exist locally, pull the image. If the image does exist, build it.
          | `ifneedbepullelsecachedbuild` | If the image does not exist locally, pull the image. If the image does exist, build it with caching enabled.
          | `push` | Push the container to [Docker Hub](https://hub.docker.com)  or the @[specified docker registry](docker_registry).
          | `pushifnotpresent` | Push the container to [Docker Hub](https://hub.docker.com) or the @[specified docker registry](docker_registry) if the @[tag](docker_tag) does not exist yet.
          | `donothing` / `meh` | Do not build or pull anything.

        $ref: '#/definitions/DockerSetupStrategy'
      r:
        description: Specify which R packages should be available in order to run the component.
        $ref: '#/definitions/RRequirements'
      type:
        description: |
          Run a Viash component on a Docker backend platform.
          By specifying which dependencies your component needs, users will be able to build a docker container from scratch using the setup flag, or pull it from a docker repository.
        const: docker
      target_organization:
        description: The organization set in the resulting image. Advanced usage only.
        type: string
      chown:
        description: 'In Linux, files created by a Docker container will be owned by `root`. With `chown: true`, Viash will automatically change the ownership of output files (arguments with `type: file` and `direction: output`) to the user running the Viash command after execution of the component. Default value: `true`.'
        type: boolean
    additionalProperties: false
  NextflowVdsl3Platform:
    description: Next-gen platform for generating NextFlow VDSL3 modules.
    type: object
    properties:
      auto:
        description: |+
          @[Automated processing flags](nextflow_auto) which can be toggled on or off:

          | Flag | Description | Default |
          |---|---------|----|
          | `simplifyInput` | If `true`, an input tuple only containing only a single File (e.g. `["foo", file("in.h5ad")]`) is automatically transformed to a map (i.e. `["foo", [ input: file("in.h5ad") ] ]`). | `true` |
          | `simplifyOutput` | If `true`, an output tuple containing a map with a File (e.g. `["foo", [ output: file("out.h5ad") ] ]`) is automatically transformed to a map (i.e. `["foo", file("out.h5ad")]`). | `true` |
          | `transcript` | If `true`, the module's transcripts from `work/` are automatically published to `params.transcriptDir`. If not defined, `params.publishDir + "/_transcripts"` will be used. Will throw an error if neither are defined. | `false` |
          | `publish` | If `true`, the module's outputs are automatically published to `params.publishDir`.  Will throw an error if `params.publishDir` is not defined. | `false` |

        $ref: '#/definitions/NextflowAuto'
      directives:
        description: "@[Directives](nextflow_directives) are optional settings that affect the execution of the process. These mostly match up with the Nextflow counterparts.  \n"
        $ref: '#/definitions/NextflowDirectives'
      container:
        description: Specifies the Docker platform id to be used to run Nextflow.
        type: string
      debug:
        description: Whether or not to print debug messages.
        type: boolean
      id:
        description: Every platform can be given a specific id that can later be referred to explicitly when running or building the Viash component.
        type: string
      type:
        description: Next-gen platform for generating NextFlow VDSL3 modules.
        const: nextflow
      config:
        description: Allows tweaking how the @[Nextflow Config](nextflow_config) file is generated.
        $ref: '#/definitions/NextflowConfig'
    additionalProperties: false
  Platforms:
    anyOf:
      - $ref: '#/definitions/NativePlatform'
      - $ref: '#/definitions/DockerPlatform'
      - $ref: '#/definitions/NextflowVdsl3Platform'
  Info:
    description: Definition of meta data
    type: object
    properties:
      config:
        type: string
      platform:
        type: string
      output:
        type: string
      executable:
        type: string
      viash_version:
        type: string
      git_commit:
        type: string
      git_remote:
        type: string
      git_tag:
        type: string
    additionalProperties: false
  Author:
    description: Author metadata.
    type: object
    properties:
      name:
        description: Full name of the author, usually in the name of FirstName MiddleName LastName.
        type: string
      email:
        description: E-mail of the author.
        type: string
      info:
        description: 'Structured information. Can be any shape: a string, vector, map or even nested map.'
        type: object
      roles:
        anyOf:
          - description: |
              Role of the author. Suggested items:

              * `"author"`: Authors who have made substantial contributions to the component.
              * `"maintainer"`: The maintainer of the component.
              * `"contributor"`: Authors who have made smaller contributions (such as code patches etc.).
            type: string
          - description: |
              Role of the author. Suggested items:

              * `"author"`: Authors who have made substantial contributions to the component.
              * `"maintainer"`: The maintainer of the component.
              * `"contributor"`: Authors who have made smaller contributions (such as code patches etc.).
            type: array
            items:
              type: string
      props:
        description: Author properties. Must be a map of strings.
        type: object
        additionalProperties:
          description: Author properties. Must be a map of strings.
          type: string
    additionalProperties: false
  ComputationalRequirements:
    description: Computational requirements related to running the component.
    type: object
    properties:
      n_proc:
        description: ""
        type: integer
      cpus:
        description: The maximum number of (logical) cpus a component is allowed to use.
        type: integer
      commands:
        description: A list of commands which should be present on the system for the script to function.
        type: array
        items:
          type: string
      memory:
        description: The maximum amount of memory a component is allowed to allocate. Unit must be one of B, KB, MB, GB, TB or PB.
        type: string
    additionalProperties: false
  ApkRequirements:
    description: Specify which apk packages should be available in order to run the component.
    type: object
    properties:
      type:
        description: Specify which apk packages should be available in order to run the component.
        const: apk
      packages:
        anyOf:
          - description: Specifies which packages to install.
            type: string
          - description: Specifies which packages to install.
            type: array
            items:
              type: string
    additionalProperties: false
  AptRequirements:
    description: Specify which apt packages should be available in order to run the component.
    type: object
    properties:
      interactive:
        description: 'If `false`, the Debian frontend is set to non-interactive (recommended). Default: false.'
        type: boolean
      type:
        description: Specify which apt packages should be available in order to run the component.
        const: apt
      packages:
        anyOf:
          - description: Specifies which packages to install.
            type: string
          - description: Specifies which packages to install.
            type: array
            items:
              type: string
    additionalProperties: false
  DockerRequirements:
    description: Specify which Docker commands should be run during setup.
    type: object
    properties:
      run:
        anyOf:
          - description: Specifies which `RUN` entries to add to the Dockerfile while building it.
            type: string
          - description: Specifies which `RUN` entries to add to the Dockerfile while building it.
            type: array
            items:
              type: string
      label:
        anyOf:
          - description: Specifies which `LABEL` entries to add to the Dockerfile while building it.
            type: string
          - description: Specifies which `LABEL` entries to add to the Dockerfile while building it.
            type: array
            items:
              type: string
      build_args:
        anyOf:
          - description: Specifies which `ARG` entries to add to the Dockerfile while building it.
            type: string
          - description: Specifies which `ARG` entries to add to the Dockerfile while building it.
            type: array
            items:
              type: string
      type:
        description: Specify which Docker commands should be run during setup.
        const: docker
      add:
        anyOf:
          - description: Specifies which `ADD` entries to add to the Dockerfile while building it.
            type: string
          - description: Specifies which `ADD` entries to add to the Dockerfile while building it.
            type: array
            items:
              type: string
      env:
        anyOf:
          - description: Specifies which `ENV` entries to add to the Dockerfile while building it. Unlike `ARG`, `ENV` entries are also accessible from inside the container.
            type: string
          - description: Specifies which `ENV` entries to add to the Dockerfile while building it. Unlike `ARG`, `ENV` entries are also accessible from inside the container.
            type: array
            items:
              type: string
      resources:
        anyOf:
          - description: Specifies which `COPY` entries to add to the Dockerfile while building it.
            type: string
          - description: Specifies which `COPY` entries to add to the Dockerfile while building it.
            type: array
            items:
              type: string
      copy:
        anyOf:
          - description: Specifies which `COPY` entries to add to the Dockerfile while building it.
            type: string
          - description: Specifies which `COPY` entries to add to the Dockerfile while building it.
            type: array
            items:
              type: string
    additionalProperties: false
  JavascriptRequirements:
    description: Specify which JavaScript packages should be available in order to run the component.
    type: object
    properties:
      github:
        anyOf:
          - description: Specifies which packages to install from GitHub.
            type: string
          - description: Specifies which packages to install from GitHub.
            type: array
            items:
              type: string
      url:
        anyOf:
          - description: Specifies which packages to install using a generic URI.
            type: string
          - description: Specifies which packages to install using a generic URI.
            type: array
            items:
              type: string
      git:
        anyOf:
          - description: Specifies which packages to install using a Git URI.
            type: string
          - description: Specifies which packages to install using a Git URI.
            type: array
            items:
              type: string
      npm:
        anyOf:
          - description: Specifies which packages to install from npm.
            type: string
          - description: Specifies which packages to install from npm.
            type: array
            items:
              type: string
      type:
        description: Specify which JavaScript packages should be available in order to run the component.
        const: javascript
      packages:
        anyOf:
          - description: Specifies which packages to install from npm.
            type: string
          - description: Specifies which packages to install from npm.
            type: array
            items:
              type: string
    additionalProperties: false
  PythonRequirements:
    description: Specify which Python packages should be available in order to run the component.
    type: object
    properties:
      github:
        anyOf:
          - description: Specifies which packages to install from GitHub.
            type: string
          - description: Specifies which packages to install from GitHub.
            type: array
            items:
              type: string
      gitlab:
        anyOf:
          - description: Specifies which packages to install from GitLab.
            type: string
          - description: Specifies which packages to install from GitLab.
            type: array
            items:
              type: string
      pip:
        anyOf:
          - description: Specifies which packages to install from pip.
            type: string
          - description: Specifies which packages to install from pip.
            type: array
            items:
              type: string
      pypi:
        anyOf:
          - description: Specifies which packages to install from PyPI using pip.
            type: string
          - description: Specifies which packages to install from PyPI using pip.
            type: array
            items:
              type: string
      git:
        anyOf:
          - description: Specifies which packages to install using a Git URI.
            type: string
          - description: Specifies which packages to install using a Git URI.
            type: array
            items:
              type: string
      upgrade:
        description: 'Sets the `--upgrade` flag when set to true. Default: true.'
        type: boolean
      packages:
        anyOf:
          - description: Specifies which packages to install from pip.
            type: string
          - description: Specifies which packages to install from pip.
            type: array
            items:
              type: string
      url:
        anyOf:
          - description: Specifies which packages to install using a generic URI.
            type: string
          - description: Specifies which packages to install using a generic URI.
            type: array
            items:
              type: string
      svn:
        anyOf:
          - description: Specifies which packages to install using an SVN URI.
            type: string
          - description: Specifies which packages to install using an SVN URI.
            type: array
            items:
              type: string
      bazaar:
        anyOf:
          - description: Specifies which packages to install using a Bazaar URI.
            type: string
          - description: Specifies which packages to install using a Bazaar URI.
            type: array
            items:
              type: string
      script:
        anyOf:
          - description: Specifies a code block to run as part of the build.
            type: string
          - description: Specifies a code block to run as part of the build.
            type: array
            items:
              type: string
      type:
        description: Specify which Python packages should be available in order to run the component.
        const: python
      mercurial:
        anyOf:
          - description: Specifies which packages to install using a Mercurial URI.
            type: string
          - description: Specifies which packages to install using a Mercurial URI.
            type: array
            items:
              type: string
      user:
        description: 'Sets the `--user` flag when set to true. Default: false.'
        type: boolean
    additionalProperties: false
  RRequirements:
    description: Specify which R packages should be available in order to run the component.
    type: object
    properties:
      bioc:
        anyOf:
          - description: Specifies which packages to install from BioConductor.
            type: string
          - description: Specifies which packages to install from BioConductor.
            type: array
            items:
              type: string
      github:
        anyOf:
          - description: Specifies which packages to install from GitHub.
            type: string
          - description: Specifies which packages to install from GitHub.
            type: array
            items:
              type: string
      gitlab:
        anyOf:
          - description: Specifies which packages to install from GitLab.
            type: string
          - description: Specifies which packages to install from GitLab.
            type: array
            items:
              type: string
      url:
        anyOf:
          - description: Specifies which packages to install using a generic URI.
            type: string
          - description: Specifies which packages to install using a generic URI.
            type: array
            items:
              type: string
      bioc_force_install:
        description: 'Forces packages specified in `bioc` to be reinstalled, even if they are already present in the container. Default: false.'
        type: boolean
      git:
        anyOf:
          - description: Specifies which packages to install using a Git URI.
            type: string
          - description: Specifies which packages to install using a Git URI.
            type: array
            items:
              type: string
      cran:
        anyOf:
          - description: Specifies which packages to install from CRAN.
            type: string
          - description: Specifies which packages to install from CRAN.
            type: array
            items:
              type: string
      bitbucket:
        anyOf:
          - description: Specifies which packages to install from Bitbucket.
            type: string
          - description: Specifies which packages to install from Bitbucket.
            type: array
            items:
              type: string
      svn:
        anyOf:
          - description: Specifies which packages to install using an SVN URI.
            type: string
          - description: Specifies which packages to install using an SVN URI.
            type: array
            items:
              type: string
      packages:
        anyOf:
          - description: Specifies which packages to install from CRAN.
            type: string
          - description: Specifies which packages to install from CRAN.
            type: array
            items:
              type: string
      script:
        anyOf:
          - description: Specifies a code block to run as part of the build.
            type: string
          - description: Specifies a code block to run as part of the build.
            type: array
            items:
              type: string
      type:
        description: Specify which R packages should be available in order to run the component.
        const: r
    additionalProperties: false
  RubyRequirements:
    description: Specify which Ruby packages should be available in order to run the component.
    type: object
    properties:
      type:
        description: Specify which Ruby packages should be available in order to run the component.
        const: ruby
      packages:
        anyOf:
          - description: Specifies which packages to install.
            type: string
          - description: Specifies which packages to install.
            type: array
            items:
              type: string
    additionalProperties: false
  YumRequirements:
    description: Specify which yum packages should be available in order to run the component.
    type: object
    properties:
      type:
        description: Specify which yum packages should be available in order to run the component.
        const: yum
      packages:
        anyOf:
          - description: Specifies which packages to install.
            type: string
          - description: Specifies which packages to install.
            type: array
            items:
              type: string
    additionalProperties: false
  Requirements:
    anyOf:
      - $ref: '#/definitions/ApkRequirements'
      - $ref: '#/definitions/AptRequirements'
      - $ref: '#/definitions/DockerRequirements'
      - $ref: '#/definitions/JavascriptRequirements'
      - $ref: '#/definitions/PythonRequirements'
      - $ref: '#/definitions/RRequirements'
      - $ref: '#/definitions/RubyRequirements'
      - $ref: '#/definitions/YumRequirements'
  BooleanArgument:
    description: 'A `boolean` type argument has two possible values: `true` or `false`.'
    type: object
    properties:
      alternatives:
        anyOf:
          - description: List of alternative format variations for this argument.
            type: string
          - description: List of alternative format variations for this argument.
            type: array
            items:
              type: string
      name:
        description: "The name of the argument. Can be in the formats `--trim`, `-t` or `trim`. The number of dashes determines how values can be passed:  \n\n  - `--trim` is a long option, which can be passed with `executable_name --trim`\n  - `-t` is a short option, which can be passed with `executable_name -t`\n  - `trim` is an argument, which can be passed with `executable_name trim`  \n"
        type: string
      info:
        description: 'Structured information. Can be any shape: a string, vector, map or even nested map.'
        type: object
      default:
        anyOf:
          - description: The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.
            type: boolean
          - description: The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.
            type: array
            items:
              type: boolean
      example:
        anyOf:
          - description: An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.
            type: boolean
          - description: An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.
            type: array
            items:
              type: boolean
      description:
        description: A description of the argument. This will be displayed with `--help`.
        type: string
      multiple_sep:
        description: The delimiter character for providing [`multiple`](#multiple) values. `:` by default.
        type: string
      multiple:
        description: Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.
        type: boolean
      type:
        description: 'A `boolean` type argument has two possible values: `true` or `false`.'
        const: boolean
      required:
        description: Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.
        type: boolean
    additionalProperties: false
  BooleanTrueArgument:
    description: An argument of the `boolean_true` type acts like a `boolean` flag with a default value of `false`. When called as an argument it sets the `boolean` to `true`.
    type: object
    properties:
      alternatives:
        anyOf:
          - description: List of alternative format variations for this argument.
            type: string
          - description: List of alternative format variations for this argument.
            type: array
            items:
              type: string
      name:
        description: "The name of the argument. Can be in the formats `--silent`, `-s` or `silent`. The number of dashes determines how values can be passed:  \n\n  - `--silent` is a long option, which can be passed with `executable_name --silent`\n  - `-s` is a short option, which can be passed with `executable_name -s`\n  - `silent` is an argument, which can be passed with `executable_name silent`  \n"
        type: string
      info:
        description: 'Structured information. Can be any shape: a string, vector, map or even nested map.'
        type: object
      description:
        description: A description of the argument. This will be displayed with `--help`.
        type: string
      type:
        description: An argument of the `boolean_true` type acts like a `boolean` flag with a default value of `false`. When called as an argument it sets the `boolean` to `true`.
        const: boolean_true
    additionalProperties: false
  BooleanFalseArgument:
    description: An argument of the `boolean_false` type acts like an inverted `boolean` flag with a default value of `true`. When called as an argument it sets the `boolean` to `false`.
    type: object
    properties:
      alternatives:
        anyOf:
          - description: List of alternative format variations for this argument.
            type: string
          - description: List of alternative format variations for this argument.
            type: array
            items:
              type: string
      name:
        description: "The name of the argument. Can be in the formats `--no-log`, `-n` or `no-log`. The number of dashes determines how values can be passed:  \n\n  - `--no-log` is a long option, which can be passed with `executable_name --no-log`\n  - `-n` is a short option, which can be passed with `executable_name -n`\n  - `no-log` is an argument, which can be passed with `executable_name no-log`  \n"
        type: string
      info:
        description: 'Structured information. Can be any shape: a string, vector, map or even nested map.'
        type: object
      description:
        description: A description of the argument. This will be displayed with `--help`.
        type: string
      type:
        description: An argument of the `boolean_false` type acts like an inverted `boolean` flag with a default value of `true`. When called as an argument it sets the `boolean` to `false`.
        const: boolean_false
    additionalProperties: false
  DoubleArgument:
    description: A `double` type argument has a numeric value with decimal points
    type: object
    properties:
      alternatives:
        anyOf:
          - description: List of alternative format variations for this argument.
            type: string
          - description: List of alternative format variations for this argument.
            type: array
            items:
              type: string
      name:
        description: "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
        type: string
      info:
        description: 'Structured information. Can be any shape: a string, vector, map or even nested map.'
        type: object
      max:
        description: Maximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with [`min`](#min) to clamp values.
        type: number
      default:
        anyOf:
          - description: The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.
            type: number
          - description: The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.
            type: array
            items:
              type: number
      example:
        anyOf:
          - description: An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.
            type: number
          - description: An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.
            type: array
            items:
              type: number
      description:
        description: A description of the argument. This will be displayed with `--help`.
        type: string
      multiple_sep:
        description: The delimiter character for providing [`multiple`](#multiple) values. `:` by default.
        type: string
      min:
        description: Minimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with [`max`](#max) to clamp values.
        type: number
      multiple:
        description: Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.
        type: boolean
      type:
        description: A `double` type argument has a numeric value with decimal points
        const: double
      required:
        description: Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.
        type: boolean
    additionalProperties: false
  FileArgument:
    description: A `file` type argument has a string value that points to a file or folder path.
    type: object
    properties:
      alternatives:
        anyOf:
          - description: List of alternative format variations for this argument.
            type: string
          - description: List of alternative format variations for this argument.
            type: array
            items:
              type: string
      name:
        description: "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
        type: string
      create_parent:
        description: 'If the output filename is a path and it does not exist, create it before executing the script (only for `direction: output`).'
        type: boolean
      direction:
        description: Makes this argument an `input` or an `output`, as in does the file/folder needs to be read or written. `input` by default.
        $ref: '#/definitions/Direction'
      info:
        description: 'Structured information. Can be any shape: a string, vector, map or even nested map.'
        type: object
      must_exist:
        description: Checks whether the file or folder exists. For input files, this check will happen before the execution of the script, while for output files the check will happen afterwards.
        type: boolean
      default:
        anyOf:
          - description: The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.
            type: string
          - description: The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.
            type: array
            items:
              type: string
      example:
        anyOf:
          - description: An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.
            type: string
          - description: An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.
            type: array
            items:
              type: string
      description:
        description: A description of the argument. This will be displayed with `--help`.
        type: string
      multiple_sep:
        description: The delimiter character for providing [`multiple`](#multiple) values. `:` by default.
        type: string
      multiple:
        description: Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.
        type: boolean
      type:
        description: A `file` type argument has a string value that points to a file or folder path.
        const: file
      required:
        description: Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.
        type: boolean
    additionalProperties: false
  IntegerArgument:
    description: An `integer` type argument has a numeric value without decimal points.
    type: object
    properties:
      alternatives:
        anyOf:
          - description: List of alternative format variations for this argument.
            type: string
          - description: List of alternative format variations for this argument.
            type: array
            items:
              type: string
      name:
        description: "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
        type: string
      choices:
        description: Limit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.
        type: array
        items:
          type: integer
      info:
        description: 'Structured information. Can be any shape: a string, vector, map or even nested map.'
        type: object
      max:
        description: Maximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with [`min`](#min) to clamp values.
        type: integer
      default:
        anyOf:
          - description: The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.
            type: integer
          - description: The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.
            type: array
            items:
              type: integer
      example:
        anyOf:
          - description: An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.
            type: integer
          - description: An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.
            type: array
            items:
              type: integer
      description:
        description: A description of the argument. This will be displayed with `--help`.
        type: string
      multiple_sep:
        description: The delimiter character for providing [`multiple`](#multiple) values. `:` by default.
        type: string
      min:
        description: Minimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with [`max`](#max) to clamp values.
        type: integer
      multiple:
        description: Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.
        type: boolean
      type:
        description: An `integer` type argument has a numeric value without decimal points.
        const: integer
      required:
        description: Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.
        type: boolean
    additionalProperties: false
  LongArgument:
    description: An `long` type argument has a numeric value without decimal points.
    type: object
    properties:
      alternatives:
        anyOf:
          - description: List of alternative format variations for this argument.
            type: string
          - description: List of alternative format variations for this argument.
            type: array
            items:
              type: string
      name:
        description: "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
        type: string
      choices:
        description: Limit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.
        type: array
        items:
          type: integer
      info:
        description: 'Structured information. Can be any shape: a string, vector, map or even nested map.'
        type: object
      max:
        description: Maximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with [`min`](#min) to clamp values.
        type: integer
      default:
        anyOf:
          - description: The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.
            type: integer
          - description: The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.
            type: array
            items:
              type: integer
      example:
        anyOf:
          - description: An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.
            type: integer
          - description: An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.
            type: array
            items:
              type: integer
      description:
        description: A description of the argument. This will be displayed with `--help`.
        type: string
      multiple_sep:
        description: The delimiter character for providing [`multiple`](#multiple) values. `:` by default.
        type: string
      min:
        description: Minimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with [`max`](#max) to clamp values.
        type: integer
      multiple:
        description: Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.
        type: boolean
      type:
        description: An `long` type argument has a numeric value without decimal points.
        const: long
      required:
        description: Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.
        type: boolean
    additionalProperties: false
  StringArgument:
    description: A `string` type argument has a value made up of an ordered sequences of characters, like "Hello" or "I'm a string".
    type: object
    properties:
      alternatives:
        anyOf:
          - description: List of alternative format variations for this argument.
            type: string
          - description: List of alternative format variations for this argument.
            type: array
            items:
              type: string
      name:
        description: "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
        type: string
      choices:
        description: Limit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.
        type: array
        items:
          type: string
      info:
        description: 'Structured information. Can be any shape: a string, vector, map or even nested map.'
        type: object
      default:
        anyOf:
          - description: The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.
            type: string
          - description: The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.
            type: array
            items:
              type: string
      example:
        anyOf:
          - description: An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.
            type: string
          - description: An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.
            type: array
            items:
              type: string
      description:
        description: A description of the argument. This will be displayed with `--help`.
        type: string
      multiple_sep:
        description: The delimiter character for providing [`multiple`](#multiple) values. `:` by default.
        type: string
      multiple:
        description: Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.
        type: boolean
      type:
        description: A `string` type argument has a value made up of an ordered sequences of characters, like "Hello" or "I'm a string".
        const: string
      required:
        description: Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.
        type: boolean
    additionalProperties: false
  Argument:
    anyOf:
      - $ref: '#/definitions/BooleanArgument'
      - $ref: '#/definitions/BooleanTrueArgument'
      - $ref: '#/definitions/BooleanFalseArgument'
      - $ref: '#/definitions/DoubleArgument'
      - $ref: '#/definitions/FileArgument'
      - $ref: '#/definitions/IntegerArgument'
      - $ref: '#/definitions/LongArgument'
      - $ref: '#/definitions/StringArgument'
  ArgumentGroup:
    type: object
    properties:
      name:
        description: The name of the argument group.
        type: string
      description:
        description: A description of the argument group. Multiline descriptions are supported.
        type: string
      arguments:
        description: List of the arguments names.
        type: array
        items:
          $ref: '#/definitions/Argument'
    required:
      - name
      - arguments
    additionalProperties: false
  BashScript:
    description: |-
      An executable Bash script.
      When defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.
      When defined in functionality.test_resources, all entries will be executed during `viash test`.
    type: object
    properties:
      path:
        description: The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.
        type: string
      text:
        description: The content of the resulting file specified as a string. Mutually exclusive with `path`.
        type: string
      is_executable:
        description: Whether the resulting resource file should be made executable.
        type: boolean
      type:
        description: |-
          An executable Bash script.
          When defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.
          When defined in functionality.test_resources, all entries will be executed during `viash test`.
        const: bash_script
      dest:
        description: Resulting filename of the resource. From within a script, the file can be accessed at `meta["resources_dir"] + "/" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.
        type: string
    additionalProperties: false
  CSharpScript:
    description: |-
      An executable C# script.
      When defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.
      When defined in functionality.test_resources, all entries will be executed during `viash test`.
    type: object
    properties:
      path:
        description: The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.
        type: string
      text:
        description: The content of the resulting file specified as a string. Mutually exclusive with `path`.
        type: string
      is_executable:
        description: Whether the resulting resource file should be made executable.
        type: boolean
      type:
        description: |-
          An executable C# script.
          When defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.
          When defined in functionality.test_resources, all entries will be executed during `viash test`.
        const: csharp_script
      dest:
        description: Resulting filename of the resource. From within a script, the file can be accessed at `meta["resources_dir"] + "/" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.
        type: string
    additionalProperties: false
  Executable:
    description: An executable file.
    type: object
    properties:
      path:
        description: The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.
        type: string
      text:
        description: The content of the resulting file specified as a string. Mutually exclusive with `path`.
        type: string
      is_executable:
        description: Whether the resulting resource file should be made executable.
        type: boolean
      type:
        description: An executable file.
        const: executable
      dest:
        description: Resulting filename of the resource. From within a script, the file can be accessed at `meta["resources_dir"] + "/" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.
        type: string
    additionalProperties: false
  JavaScriptScript:
    description: |-
      An executable JavaScript script.
      When defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.
      When defined in functionality.test_resources, all entries will be executed during `viash test`.
    type: object
    properties:
      path:
        description: The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.
        type: string
      text:
        description: The content of the resulting file specified as a string. Mutually exclusive with `path`.
        type: string
      is_executable:
        description: Whether the resulting resource file should be made executable.
        type: boolean
      type:
        description: |-
          An executable JavaScript script.
          When defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.
          When defined in functionality.test_resources, all entries will be executed during `viash test`.
        const: javascript_script
      dest:
        description: Resulting filename of the resource. From within a script, the file can be accessed at `meta["resources_dir"] + "/" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.
        type: string
    additionalProperties: false
  NextflowScript:
    description: A Nextflow script. Work in progress; added mainly for annotation at the moment.
    type: object
    properties:
      path:
        description: The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.
        type: string
      text:
        description: The content of the resulting file specified as a string. Mutually exclusive with `path`.
        type: string
      entrypoint:
        description: The name of the workflow to be executed.
        type: string
      is_executable:
        description: Whether the resulting resource file should be made executable.
        type: boolean
      type:
        description: A Nextflow script. Work in progress; added mainly for annotation at the moment.
        const: nextflow_script
      dest:
        description: Resulting filename of the resource. From within a script, the file can be accessed at `meta["resources_dir"] + "/" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.
        type: string
    additionalProperties: false
  PlainFile:
    description: A plain file. This can only be used as a supporting resource for the main script or unit tests.
    type: object
    properties:
      path:
        description: The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.
        type: string
      text:
        description: The content of the resulting file specified as a string. Mutually exclusive with `path`.
        type: string
      is_executable:
        description: Whether the resulting resource file should be made executable.
        type: boolean
      type:
        description: A plain file. This can only be used as a supporting resource for the main script or unit tests.
        const: file
      dest:
        description: Resulting filename of the resource. From within a script, the file can be accessed at `meta["resources_dir"] + "/" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.
        type: string
    additionalProperties: false
  PythonScript:
    description: |-
      An executable Python script.
      When defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.
      When defined in functionality.test_resources, all entries will be executed during `viash test`.
    type: object
    properties:
      path:
        description: The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.
        type: string
      text:
        description: The content of the resulting file specified as a string. Mutually exclusive with `path`.
        type: string
      is_executable:
        description: Whether the resulting resource file should be made executable.
        type: boolean
      type:
        description: |-
          An executable Python script.
          When defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.
          When defined in functionality.test_resources, all entries will be executed during `viash test`.
        const: python_script
      dest:
        description: Resulting filename of the resource. From within a script, the file can be accessed at `meta["resources_dir"] + "/" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.
        type: string
    additionalProperties: false
  RScript:
    description: |-
      An executable R script.
      When defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.
      When defined in functionality.test_resources, all entries will be executed during `viash test`.
    type: object
    properties:
      path:
        description: The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.
        type: string
      text:
        description: The content of the resulting file specified as a string. Mutually exclusive with `path`.
        type: string
      is_executable:
        description: Whether the resulting resource file should be made executable.
        type: boolean
      type:
        description: |-
          An executable R script.
          When defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.
          When defined in functionality.test_resources, all entries will be executed during `viash test`.
        const: r_script
      dest:
        description: Resulting filename of the resource. From within a script, the file can be accessed at `meta["resources_dir"] + "/" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.
        type: string
    additionalProperties: false
  ScalaScript:
    description: |-
      An executable Scala script.
      When defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.
      When defined in functionality.test_resources, all entries will be executed during `viash test`.
    type: object
    properties:
      path:
        description: The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.
        type: string
      text:
        description: The content of the resulting file specified as a string. Mutually exclusive with `path`.
        type: string
      is_executable:
        description: Whether the resulting resource file should be made executable.
        type: boolean
      type:
        description: |-
          An executable Scala script.
          When defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.
          When defined in functionality.test_resources, all entries will be executed during `viash test`.
        const: scala_script
      dest:
        description: Resulting filename of the resource. From within a script, the file can be accessed at `meta["resources_dir"] + "/" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.
        type: string
    additionalProperties: false
  Resource:
    anyOf:
      - $ref: '#/definitions/BashScript'
      - $ref: '#/definitions/CSharpScript'
      - $ref: '#/definitions/Executable'
      - $ref: '#/definitions/JavaScriptScript'
      - $ref: '#/definitions/NextflowScript'
      - $ref: '#/definitions/PlainFile'
      - $ref: '#/definitions/PythonScript'
      - $ref: '#/definitions/RScript'
      - $ref: '#/definitions/ScalaScript'
  NextflowDirectives:
    description: |
      Directives are optional settings that affect the execution of the process.
    type: object
    properties:
      beforeScript:
        description: |
          The `beforeScript` directive allows you to execute a custom (Bash) snippet before the main process script is run. This may be useful to initialise the underlying cluster environment or for other custom initialisation.

          See [`beforeScript`](https://www.nextflow.io/docs/latest/process.html#beforeScript).
        type: string
      module:
        anyOf:
          - description: |
              Environment Modules is a package manager that allows you to dynamically configure your execution environment and easily switch between multiple versions of the same software tool.

              If it is available in your system you can use it with Nextflow in order to configure the processes execution environment in your pipeline.

              In a process definition you can use the `module` directive to load a specific module version to be used in the process execution environment.

              See [`module`](https://www.nextflow.io/docs/latest/process.html#module).
            type: string
          - description: |
              Environment Modules is a package manager that allows you to dynamically configure your execution environment and easily switch between multiple versions of the same software tool.

              If it is available in your system you can use it with Nextflow in order to configure the processes execution environment in your pipeline.

              In a process definition you can use the `module` directive to load a specific module version to be used in the process execution environment.

              See [`module`](https://www.nextflow.io/docs/latest/process.html#module).
            type: array
            items:
              type: string
      queue:
        anyOf:
          - description: |
              The `queue` directory allows you to set the queue where jobs are scheduled when using a grid based executor in your pipeline.

              See [`queue`](https://www.nextflow.io/docs/latest/process.html#queue).
            type: string
          - description: |
              The `queue` directory allows you to set the queue where jobs are scheduled when using a grid based executor in your pipeline.

              See [`queue`](https://www.nextflow.io/docs/latest/process.html#queue).
            type: array
            items:
              type: string
      label:
        anyOf:
          - description: |
              The `label` directive allows the annotation of processes with mnemonic identifier of your choice.

              See [`label`](https://www.nextflow.io/docs/latest/process.html#label).
            type: string
          - description: |
              The `label` directive allows the annotation of processes with mnemonic identifier of your choice.

              See [`label`](https://www.nextflow.io/docs/latest/process.html#label).
            type: array
            items:
              type: string
      container:
        anyOf:
          - description: |
              The `container` directive allows you to execute the process script in a Docker container.

              It requires the Docker daemon to be running in machine where the pipeline is executed, i.e. the local machine when using the local executor or the cluster nodes when the pipeline is deployed through a grid executor.

              Viash implements allows either a string value or a map. In case a map is used, the allowed keys are: `registry`, `image`, and `tag`. The `image` value must be specified.

              See [`container`](https://www.nextflow.io/docs/latest/process.html#container).
            type: object
            additionalProperties:
              description: |
                The `container` directive allows you to execute the process script in a Docker container.

                It requires the Docker daemon to be running in machine where the pipeline is executed, i.e. the local machine when using the local executor or the cluster nodes when the pipeline is deployed through a grid executor.

                Viash implements allows either a string value or a map. In case a map is used, the allowed keys are: `registry`, `image`, and `tag`. The `image` value must be specified.

                See [`container`](https://www.nextflow.io/docs/latest/process.html#container).
              type: string
          - description: |
              The `container` directive allows you to execute the process script in a Docker container.

              It requires the Docker daemon to be running in machine where the pipeline is executed, i.e. the local machine when using the local executor or the cluster nodes when the pipeline is deployed through a grid executor.

              Viash implements allows either a string value or a map. In case a map is used, the allowed keys are: `registry`, `image`, and `tag`. The `image` value must be specified.

              See [`container`](https://www.nextflow.io/docs/latest/process.html#container).
            type: string
      publishDir:
        anyOf:
          - anyOf:
              - description: |
                  The `publishDir` directive allows you to publish the process output files to a specified folder.

                  Viash implements this directive as a plain string or a map. The allowed keywords for the map are: `path`, `mode`, `overwrite`, `pattern`, `saveAs`, `enabled`. The `path` key and value are required.
                  The allowed values for `mode` are: `symlink`, `rellink`, `link`, `copy`, `copyNoFollow`, `move`.

                  See [`publishDir`](https://www.nextflow.io/docs/latest/process.html#publishdir).
                type: string
              - description: |
                  The `publishDir` directive allows you to publish the process output files to a specified folder.

                  Viash implements this directive as a plain string or a map. The allowed keywords for the map are: `path`, `mode`, `overwrite`, `pattern`, `saveAs`, `enabled`. The `path` key and value are required.
                  The allowed values for `mode` are: `symlink`, `rellink`, `link`, `copy`, `copyNoFollow`, `move`.

                  See [`publishDir`](https://www.nextflow.io/docs/latest/process.html#publishdir).
                type: object
                additionalProperties:
                  description: |
                    The `publishDir` directive allows you to publish the process output files to a specified folder.

                    Viash implements this directive as a plain string or a map. The allowed keywords for the map are: `path`, `mode`, `overwrite`, `pattern`, `saveAs`, `enabled`. The `path` key and value are required.
                    The allowed values for `mode` are: `symlink`, `rellink`, `link`, `copy`, `copyNoFollow`, `move`.

                    See [`publishDir`](https://www.nextflow.io/docs/latest/process.html#publishdir).
                  type: string
          - description: |
              The `publishDir` directive allows you to publish the process output files to a specified folder.

              Viash implements this directive as a plain string or a map. The allowed keywords for the map are: `path`, `mode`, `overwrite`, `pattern`, `saveAs`, `enabled`. The `path` key and value are required.
              The allowed values for `mode` are: `symlink`, `rellink`, `link`, `copy`, `copyNoFollow`, `move`.

              See [`publishDir`](https://www.nextflow.io/docs/latest/process.html#publishdir).
            type: array
            items:
              anyOf:
                - description: |
                    The `publishDir` directive allows you to publish the process output files to a specified folder.

                    Viash implements this directive as a plain string or a map. The allowed keywords for the map are: `path`, `mode`, `overwrite`, `pattern`, `saveAs`, `enabled`. The `path` key and value are required.
                    The allowed values for `mode` are: `symlink`, `rellink`, `link`, `copy`, `copyNoFollow`, `move`.

                    See [`publishDir`](https://www.nextflow.io/docs/latest/process.html#publishdir).
                  type: string
                - description: |
                    The `publishDir` directive allows you to publish the process output files to a specified folder.

                    Viash implements this directive as a plain string or a map. The allowed keywords for the map are: `path`, `mode`, `overwrite`, `pattern`, `saveAs`, `enabled`. The `path` key and value are required.
                    The allowed values for `mode` are: `symlink`, `rellink`, `link`, `copy`, `copyNoFollow`, `move`.

                    See [`publishDir`](https://www.nextflow.io/docs/latest/process.html#publishdir).
                  type: object
                  additionalProperties:
                    description: |
                      The `publishDir` directive allows you to publish the process output files to a specified folder.

                      Viash implements this directive as a plain string or a map. The allowed keywords for the map are: `path`, `mode`, `overwrite`, `pattern`, `saveAs`, `enabled`. The `path` key and value are required.
                      The allowed values for `mode` are: `symlink`, `rellink`, `link`, `copy`, `copyNoFollow`, `move`.

                      See [`publishDir`](https://www.nextflow.io/docs/latest/process.html#publishdir).
                    type: string
      maxForks:
        anyOf:
          - description: |
              The `maxForks` directive allows you to define the maximum number of process instances that can be executed in parallel. By default this value is equals to the number of CPU cores available minus 1.

              If you want to execute a process in a sequential manner, set this directive to one.

              See [`maxForks`](https://www.nextflow.io/docs/latest/process.html#maxforks).
            type: string
          - description: |
              The `maxForks` directive allows you to define the maximum number of process instances that can be executed in parallel. By default this value is equals to the number of CPU cores available minus 1.

              If you want to execute a process in a sequential manner, set this directive to one.

              See [`maxForks`](https://www.nextflow.io/docs/latest/process.html#maxforks).
            type: integer
      maxErrors:
        anyOf:
          - description: |
              The `maxErrors` directive allows you to specify the maximum number of times a process can fail when using the `retry` error strategy. By default this directive is disabled.

              See [`maxErrors`](https://www.nextflow.io/docs/latest/process.html#maxerrors).
            type: string
          - description: |
              The `maxErrors` directive allows you to specify the maximum number of times a process can fail when using the `retry` error strategy. By default this directive is disabled.

              See [`maxErrors`](https://www.nextflow.io/docs/latest/process.html#maxerrors).
            type: integer
      cpus:
        anyOf:
          - description: |
              The `cpus` directive allows you to define the number of (logical) CPU required by the process' task.

              See [`cpus`](https://www.nextflow.io/docs/latest/process.html#cpus).
            type: integer
          - description: |
              The `cpus` directive allows you to define the number of (logical) CPU required by the process' task.

              See [`cpus`](https://www.nextflow.io/docs/latest/process.html#cpus).
            type: string
      accelerator:
        description: |
          The `accelerator` directive allows you to specify the hardware accelerator requirement for the task execution e.g. GPU processor.

          Viash implements this directive as a map with accepted keywords: `type`, `limit`, `request`, and `runtime`.

          See [`accelerator`](https://www.nextflow.io/docs/latest/process.html#accelerator).
        type: object
        additionalProperties:
          description: |
            The `accelerator` directive allows you to specify the hardware accelerator requirement for the task execution e.g. GPU processor.

            Viash implements this directive as a map with accepted keywords: `type`, `limit`, `request`, and `runtime`.

            See [`accelerator`](https://www.nextflow.io/docs/latest/process.html#accelerator).
          type: string
      time:
        description: |
          The `time` directive allows you to define how long a process is allowed to run.

          See [`time`](https://www.nextflow.io/docs/latest/process.html#time).
        type: string
      afterScript:
        description: |
          The `afterScript` directive allows you to execute a custom (Bash) snippet immediately after the main process has run. This may be useful to clean up your staging area.

          See [`afterScript`](https://www.nextflow.io/docs/latest/process.html#afterscript).
        type: string
      executor:
        description: "The `executor` defines the underlying system where processes are executed. By default a process uses the executor defined globally in the nextflow.config file.\n\nThe `executor` directive allows you to configure what executor has to be used by the process, overriding the default configuration. The following values can be used:\n\n| Name | Executor |\n|------|----------|\n| awsbatch | The process is executed using the AWS Batch service. | \n| azurebatch | The process is executed using the Azure Batch service. | \n| condor | The process is executed using the HTCondor job scheduler. | \n| google-lifesciences | The process is executed using the Google Genomics Pipelines service. | \n| ignite | The process is executed using the Apache Ignite cluster. | \n| k8s | The process is executed using the Kubernetes cluster. | \n| local | The process is executed in the computer where Nextflow is launched. | \n| lsf | The process is executed using the Platform LSF job scheduler. | \n| moab | The process is executed using the Moab job scheduler. | \n| nqsii | The process is executed using the NQSII job scheduler. | \n| oge | Alias for the sge executor. | \n| pbs | The process is executed using the PBS/Torque job scheduler. | \n| pbspro | The process is executed using the PBS Pro job scheduler. | \n| sge | The process is executed using the Sun Grid Engine / Open Grid Engine. | \n| slurm | The process is executed using the SLURM job scheduler. | \n| tes | The process is executed using the GA4GH TES service. | \n| uge | Alias for the sge executor. |\n\nSee [`executor`](https://www.nextflow.io/docs/latest/process.html#executor).\n"
        type: string
      containerOptions:
        anyOf:
          - description: |
              The `containerOptions` directive allows you to specify any container execution option supported by the underlying container engine (ie. Docker, Singularity, etc). This can be useful to provide container settings only for a specific process e.g. mount a custom path.

              See [`containerOptions`](https://www.nextflow.io/docs/latest/process.html#containeroptions).
            type: string
          - description: |
              The `containerOptions` directive allows you to specify any container execution option supported by the underlying container engine (ie. Docker, Singularity, etc). This can be useful to provide container settings only for a specific process e.g. mount a custom path.

              See [`containerOptions`](https://www.nextflow.io/docs/latest/process.html#containeroptions).
            type: array
            items:
              type: string
      disk:
        description: |
          The `disk` directive allows you to define how much local disk storage the process is allowed to use.

          See [`disk`](https://www.nextflow.io/docs/latest/process.html#disk).
        type: string
      tag:
        description: |
          The `tag` directive allows you to associate each process execution with a custom label, so that it will be easier to identify them in the log file or in the trace execution report.

          See [`tag`](https://www.nextflow.io/docs/latest/process.html#tag).
        type: string
      conda:
        anyOf:
          - description: |
              The `conda` directive allows for the definition of the process dependencies using the Conda package manager.

              Nextflow automatically sets up an environment for the given package names listed by in the `conda` directive.

              See [`conda`](https://www.nextflow.io/docs/latest/process.html#conda).
            type: string
          - description: |
              The `conda` directive allows for the definition of the process dependencies using the Conda package manager.

              Nextflow automatically sets up an environment for the given package names listed by in the `conda` directive.

              See [`conda`](https://www.nextflow.io/docs/latest/process.html#conda).
            type: array
            items:
              type: string
      machineType:
        description: |2
           The `machineType` can be used to specify a predefined Google Compute Platform machine type when running using the Google Life Sciences executor.

          See [`machineType`](https://www.nextflow.io/docs/latest/process.html#machinetype).
        type: string
      stageInMode:
        description: "The `stageInMode` directive defines how input files are staged-in to the process work directory. The following values are allowed:\n\n| Value | Description |\n|-------|-------------| \n| copy | Input files are staged in the process work directory by creating a copy. | \n| link | Input files are staged in the process work directory by creating an (hard) link for each of them. | \n| symlink | Input files are staged in the process work directory by creating a symbolic link with an absolute path for each of them (default). | \n| rellink | Input files are staged in the process work directory by creating a symbolic link with a relative path for each of them. | \n\nSee [`stageInMode`](https://www.nextflow.io/docs/latest/process.html#stageinmode).\n"
        type: string
      cache:
        anyOf:
          - description: |
              The `cache` directive allows you to store the process results to a local cache. When the cache is enabled and the pipeline is launched with the resume option, any following attempt to execute the process, along with the same inputs, will cause the process execution to be skipped, producing the stored data as the actual results.

              The caching feature generates a unique key by indexing the process script and inputs. This key is used to identify univocally the outputs produced by the process execution.

              The `cache` is enabled by default, you can disable it for a specific process by setting the cache directive to `false`.

              Accepted values are: `true`, `false`, `"deep"`, and `"lenient"`.

              See [`cache`](https://www.nextflow.io/docs/latest/process.html#cache).
            type: boolean
          - description: |
              The `cache` directive allows you to store the process results to a local cache. When the cache is enabled and the pipeline is launched with the resume option, any following attempt to execute the process, along with the same inputs, will cause the process execution to be skipped, producing the stored data as the actual results.

              The caching feature generates a unique key by indexing the process script and inputs. This key is used to identify univocally the outputs produced by the process execution.

              The `cache` is enabled by default, you can disable it for a specific process by setting the cache directive to `false`.

              Accepted values are: `true`, `false`, `"deep"`, and `"lenient"`.

              See [`cache`](https://www.nextflow.io/docs/latest/process.html#cache).
            type: string
      pod:
        anyOf:
          - description: |
              The `pod` directive allows the definition of pods specific settings, such as environment variables, secrets and config maps when using the Kubernetes executor.

              See [`pod`](https://www.nextflow.io/docs/latest/process.html#pod).
            type: object
            additionalProperties:
              description: |
                The `pod` directive allows the definition of pods specific settings, such as environment variables, secrets and config maps when using the Kubernetes executor.

                See [`pod`](https://www.nextflow.io/docs/latest/process.html#pod).
              type: string
          - description: |
              The `pod` directive allows the definition of pods specific settings, such as environment variables, secrets and config maps when using the Kubernetes executor.

              See [`pod`](https://www.nextflow.io/docs/latest/process.html#pod).
            type: array
            items:
              type: object
              additionalProperties:
                type: string
      penv:
        description: |
          The `penv` directive allows you to define the parallel environment to be used when submitting a parallel task to the SGE resource manager.

          See [`penv`](https://www.nextflow.io/docs/latest/process.html#penv).
        type: string
      scratch:
        anyOf:
          - description: |
              The `scratch` directive allows you to execute the process in a temporary folder that is local to the execution node.

              See [`scratch`](https://www.nextflow.io/docs/latest/process.html#scratch).
            type: boolean
          - description: |
              The `scratch` directive allows you to execute the process in a temporary folder that is local to the execution node.

              See [`scratch`](https://www.nextflow.io/docs/latest/process.html#scratch).
            type: string
      storeDir:
        description: |
          The `storeDir` directive allows you to define a directory that is used as a permanent cache for your process results.

          See [`storeDir`](https://www.nextflow.io/docs/latest/process.html#storeDir).
        type: string
      maxRetries:
        anyOf:
          - description: |
              The `maxRetries` directive allows you to define the maximum number of times a process instance can be re-submitted in case of failure. This value is applied only when using the retry error strategy. By default only one retry is allowed.

              See [`maxRetries`](https://www.nextflow.io/docs/latest/process.html#maxretries).
            type: string
          - description: |
              The `maxRetries` directive allows you to define the maximum number of times a process instance can be re-submitted in case of failure. This value is applied only when using the retry error strategy. By default only one retry is allowed.

              See [`maxRetries`](https://www.nextflow.io/docs/latest/process.html#maxretries).
            type: integer
      echo:
        anyOf:
          - description: "By default the stdout produced by the commands executed in all processes is ignored. By setting the `echo` directive to true, you can forward the process stdout to the current top running process stdout file, showing it in the shell terminal.\n \nSee [`echo`](https://www.nextflow.io/docs/latest/process.html#echo).\n"
            type: boolean
          - description: "By default the stdout produced by the commands executed in all processes is ignored. By setting the `echo` directive to true, you can forward the process stdout to the current top running process stdout file, showing it in the shell terminal.\n \nSee [`echo`](https://www.nextflow.io/docs/latest/process.html#echo).\n"
            type: string
      errorStrategy:
        description: |
          The `errorStrategy` directive allows you to define how an error condition is managed by the process. By default when an error status is returned by the executed script, the process stops immediately. This in turn forces the entire pipeline to terminate.

          Table of available error strategies:
          | Name | Executor |
          |------|----------|
          | `terminate` | Terminates the execution as soon as an error condition is reported. Pending jobs are killed (default) |
          | `finish` | Initiates an orderly pipeline shutdown when an error condition is raised, waiting the completion of any submitted job. |
          | `ignore` | Ignores processes execution errors. |
          | `retry` | Re-submit for execution a process returning an error condition. |

          See [`errorStrategy`](https://www.nextflow.io/docs/latest/process.html#errorstrategy).
        type: string
      memory:
        description: |
          The `memory` directive allows you to define how much memory the process is allowed to use.

          See [`memory`](https://www.nextflow.io/docs/latest/process.html#memory).
        type: string
      stageOutMode:
        description: "The `stageOutMode` directive defines how output files are staged-out from the scratch directory to the process work directory. The following values are allowed:\n\n| Value | Description |\n|-------|-------------| \n| copy | Output files are copied from the scratch directory to the work directory. | \n| move | Output files are moved from the scratch directory to the work directory. | \n| rsync | Output files are copied from the scratch directory to the work directory by using the rsync utility. |\n\nSee [`stageOutMode`](https://www.nextflow.io/docs/latest/process.html#stageoutmode).\n"
        type: string
    additionalProperties: false
  NextflowAuto:
    description: Automated processing flags which can be toggled on or off.
    type: object
    properties:
      simplifyInput:
        description: |
          If `true`, an input tuple only containing only a single File (e.g. `["foo", file("in.h5ad")]`) is automatically transformed to a map (i.e. `["foo", [ input: file("in.h5ad") ] ]`).

          Default: `true`.
        type: boolean
      simplifyOutput:
        description: |
          If `true`, an output tuple containing a map with a File (e.g. `["foo", [ output: file("out.h5ad") ] ]`) is automatically transformed to a map (i.e. `["foo", file("out.h5ad")]`).

          Default: `true`.
        type: boolean
      publish:
        description: |
          If `true`, the module's outputs are automatically published to `params.publishDir`.
          Will throw an error if `params.publishDir` is not defined.

          Default: `false`.
        type: boolean
      transcript:
        description: |
          If `true`, the module's transcripts from `work/` are automatically published to `params.transcriptDir`.
          If not defined, `params.publishDir + "/_transcripts"` will be used.
          Will throw an error if neither are defined.

          Default: `false`.
        type: boolean
    additionalProperties: false
  NextflowConfig:
    description: Allows tweaking how the Nextflow Config file is generated.
    type: object
    properties:
      labels:
        description: |
          A series of default labels to specify memory and cpu constraints.

          The default memory labels are defined as "mem1gb", "mem2gb", "mem4gb", ... upto "mem512tb" and follows powers of 2.
          The default cpu labels are defined as "cpu1", "cpu2", "cpu5", "cpu10", ... upto "cpu1000" and follows a semi logarithmic scale (1, 2, 5 per decade).

          Conceptually it is possible for a Viash Config to overwrite the full labels parameter, however likely it is more efficient to add additional labels
          in the Viash Project with a config mod.
        type: object
        additionalProperties:
          description: |
            A series of default labels to specify memory and cpu constraints.

            The default memory labels are defined as "mem1gb", "mem2gb", "mem4gb", ... upto "mem512tb" and follows powers of 2.
            The default cpu labels are defined as "cpu1", "cpu2", "cpu5", "cpu10", ... upto "cpu1000" and follows a semi logarithmic scale (1, 2, 5 per decade).

            Conceptually it is possible for a Viash Config to overwrite the full labels parameter, however likely it is more efficient to add additional labels
            in the Viash Project with a config mod.
          type: string
      script:
        anyOf:
          - description: |
              Includes a single string or list of strings into the nextflow.config file.
              This can be used to add custom profiles or include an additional config file.
            type: string
          - description: |
              Includes a single string or list of strings into the nextflow.config file.
              This can be used to add custom profiles or include an additional config file.
            type: array
            items:
              type: string
    additionalProperties: false
  DockerSetupStrategy:
    $comment: TODO add descriptions to different strategies
    enum:
      - alwaysbuild
      - build
      - b
      - alwayspull
      - pull
      - p
      - alwayspullelsebuild
      - pullelsebuild
      - alwayspullelsecachedbuild
      - pullelsecachedbuild
      - alwayscachedbuild
      - cachedbuild
      - cb
      - ifneedbebuild
      - ifneedbecachedbuild
      - ifneedbepull
      - ifneedbepullelsebuild
      - ifneedbepullelsecachedbuild
      - donothing
      - meh
      - push
      - forcepush
      - alwayspush
      - pushifnotpresent
      - gentlepush
      - maybepush
    description: The Docker setup strategy to use when building a container.
  Direction:
    enum:
      - input
      - output
    description: Makes this argument an `input` or an `output`, as in does the file/folder needs to be read or written. `input` by default.
  Status:
    enum:
      - enabled
      - disabled
      - deprecated
    description: Allows setting a component to active, deprecated or disabled.
  DockerResolveVolume:
    $comment: TODO make fully case insensitive
    enum:
      - manual
      - automatic
      - auto
      - Manual
      - Automatic
      - Auto
    description: 'Enables or disables automatic volume mapping. Enabled when set to `Automatic` or disabled when set to `Manual`. Default: `Automatic`'
properties:
  functionality:
    description: |
      The functionality-part of the config file describes the behaviour of the script in terms of arguments and resources.
      By specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you.
    $ref: '#/definitions/Functionality'
  platforms:
    description: Definition of the platforms
    type: array
    items:
      $ref: '#/definitions/Platforms'
  info:
    description: Definition of meta data
    $ref: '#/definitions/Info'
required:
  - functionality
additionalProperties: false
