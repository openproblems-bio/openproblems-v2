{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "create_component",
    "description": "Create a component Viash component.\n\nUsage:\n```\nbin/create_component --task denoising --type method --language r --name foo\nbin/create_component --task denoising --type metric --language python --name bar\n```\n",
    "type": "object",
    "definitions": {
      "arguments" : {
        "title": "Arguments",
        "type": "object",
        "description": "No description",
        "properties": {
          
          "task": {
            "type": "string",
            "description": "Type: `string`, example: `denoising`. Which task the component will be added to",
            "help_text": "Type: `string`, example: `denoising`. Which task the component will be added to."
          },
          
          "type": {
            "type": "string",
            "description": "Type: `string`, example: `metric`. The type of component to create",
            "help_text": "Type: `string`, example: `metric`. The type of component to create. Typically must be one of \u0027method\u0027, \u0027control_method\u0027 or \u0027metric\u0027."
          },
          
          "language": {
            "type": "string",
            "description": "Type: `string`, default: `python`, choices: ``python`, `r``. Which scripting language to use",
            "help_text": "Type: `string`, default: `python`, choices: ``python`, `r``. Which scripting language to use. Options are \u0027python\u0027, \u0027r\u0027.",
            "enum": ["python", "r"]
            ,
            "default": "python"
          },
          
          "name": {
            "type": "string",
            "description": "Type: `string`, example: `new_comp`. Name of the new method, formatted in snake case",
            "help_text": "Type: `string`, example: `new_comp`. Name of the new method, formatted in snake case."
          },
          
          "output": {
            "type": "string",
            "description": "Type: `file`, default: `$id.$key.output.output`. Path to the component directory",
            "help_text": "Type: `file`, default: `$id.$key.output.output`. Path to the component directory. Suggested location is `src/\u003cTASK\u003e/\u003cTYPE\u003es/\u003cNAME\u003e`.",
            "default": "$id.$key.output.output"
          },
          
          "api_file": {
            "type": "string",
            "description": "Type: `file`, default: `src/tasks/${VIASH_PAR_TASK}/api/comp_${VIASH_PAR_TYPE}.yaml`. Which API file to use",
            "help_text": "Type: `file`, default: `src/tasks/${VIASH_PAR_TASK}/api/comp_${VIASH_PAR_TYPE}.yaml`. Which API file to use. Defaults to `src/\u003cTASK\u003e/api/comp_\u003cTYPE\u003e.yaml`.\nIn tasks with different subtypes of method, this location might not exist and you might need\nto manually specify a different API file to inherit from.\n",
            "default": "src/tasks/${VIASH_PAR_TASK}/api/comp_${VIASH_PAR_TYPE}.yaml"
          },
          
          "viash_yaml": {
            "type": "string",
            "description": "Type: `file`, default: `_viash.yaml`. Path to the project config file",
            "help_text": "Type: `file`, default: `_viash.yaml`. Path to the project config file. Needed for knowing the relative location of a file to the project root.\n",
            "default": "_viash.yaml"
          }
          
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "properties": {
          
          "publish_dir": {
            "type": "string",
            "description": "Type: `string`, required, example: `output/`. Path to an output directory",
            "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
          },
          
          "param_list": {
            "type": "string",
            "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
            "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",            
            "hidden": true
          }
          
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/arguments"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      ]
}
