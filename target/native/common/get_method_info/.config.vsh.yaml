functionality:
  name: "get_method_info"
  namespace: "common"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "the root repo"
    example:
    - "../openproblems-v2"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "string"
    name: "--task_id"
    alternatives: []
    description: "A task dir"
    example:
    - "label_projection"
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "Output json"
    example: []
    default:
    - "output.json"
    must_exist: true
    create_parent: true
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  argument_groups: []
  resources:
  - type: "r_script"
    path: "script.R"
    is_executable: true
  description: "Extract method info"
  test_resources:
  - type: "file"
    path: "../../../src"
    dest: "openproblems-v2/src"
  - type: "file"
    path: "../../../_viash.yaml"
    dest: "openproblems-v2/_viash.yaml"
  - type: "python_script"
    text: "import subprocess\nfrom os import path\nimport json\n\ninput_path = meta[\"\
      resources_dir\"] + \"/openproblems-v2\"\ntask_id = \"denoising\"\noutput_path\
      \ = \"output.json\"\n\ncmd = [\n    meta['executable'],\n    \"--input\", input_path,\n\
      \    \"--task_id\", task_id,\n    \"--output\", output_path,\n]\n\nprint(\"\
      >> Running script as test\", flush=True)\nout = subprocess.run(cmd, capture_output=True,\
      \ text=True)\nprint(out.stderr)\n\nprint(\">> Checking whether output file exists\"\
      , flush=True)\nassert path.exists(output_path)\n\nprint(\">> Reading json file\"\
      , flush=True)\nwith open(output_path, 'r') as f:\n    out = json.load(f)\n \
      \   print(out)\n\nprint(\"All checks succeeded!\", flush=True)"
    dest: "generic_test.py"
    is_executable: true
  status: "enabled"
  requirements:
    commands: []
  set_wd_to_resources_dir: false
platforms:
- type: "docker"
  id: "docker"
  image: "eddelbuettel/r2u:22.04"
  target_organization: "openproblems-bio"
  target_registry: "ghcr.io"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  run_args: []
  target_image_source: "https://github.com/openproblems-bio/openproblems-v2"
  setup:
  - type: "r"
    packages: []
    cran:
    - "tidyverse"
    bioc: []
    git: []
    github: []
    gitlab: []
    bitbucket: []
    svn: []
    url: []
    script: []
    bioc_force_install: false
  - type: "apt"
    packages:
    - "curl"
    - "default-jdk"
    interactive: false
  - type: "docker"
    resources: []
    label: []
    add: []
    copy: []
    run:
    - "curl -fsSL get.viash.io | bash -s -- --bin /usr/local/bin/"
    build_args: []
    env: []
  test_setup:
  - type: "apt"
    packages:
    - "python3"
    - "python3-pip"
    - "python3-dev"
    - "python-is-python3"
    interactive: false
- type: "nextflow"
  id: "nextflow"
  variant: "vdsl3"
  directives:
    accelerator: {}
    conda: []
    containerOptions: []
    label: []
    module: []
    pod: []
    publishDir: []
    queue: []
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: true
    transcript: false
    publish: false
  debug: false
  container: "docker"
- type: "native"
  id: "native"
info:
  config: "/home/runner/work/openproblems-v2/openproblems-v2/src/common/get_method_info/config.vsh.yaml"
  platform: "native"
  output: "/home/runner/work/openproblems-v2/openproblems-v2/target/native/common/get_method_info"
  executable: "/home/runner/work/openproblems-v2/openproblems-v2/target/native/common/get_method_info/get_method_info"
  viash_version: "0.6.7"
  git_commit: "e4946657092f6d9b21e4d5bed228644153c98077"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
