functionality:
  name: "log_cpm"
  namespace: "common/normalization"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "A raw dataset"
    info:
      short_description: "Raw dataset"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        obs:
        - type: "string"
          name: "label"
          description: "Ground truth cell type labels"
        - type: "string"
          name: "batch"
          description: "Batch information"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the original dataset (before preprocessing)"
    example:
    - "raw_dataset.h5ad"
    default: []
    must_exist: false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "A preprocessed dataset"
    info:
      short_description: "Preprocessed dataset"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        - type: "double"
          name: "lognorm"
          description: "Log-transformed normalised counts"
        obs:
        - type: "double"
          name: "label"
          description: "Ground truth cell type labels"
        - type: "double"
          name: "batch"
          description: "Batch information"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
        - type: "string"
          name: "raw_dataset_id"
          description: "A unique identifier for the original dataset (before preprocessing)"
    example:
    - "preprocessed.h5ad"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  argument_groups: []
  resources:
  - type: "python_script"
    path: "script.py"
    is_executable: true
  description: "Normalize data using Log CPM"
  test_resources:
  - type: "python_script"
    text: "import anndata as ad\nimport subprocess\nfrom os import path\n\ninput_path\
      \ = meta[\"resources_dir\"] + \"/pancreas/dataset.h5ad\"\noutput_path = \"output.h5ad\"\
      \n\ncmd = [\n  meta['executable'],\n  \"--input\", input_path,\n  \"--output\"\
      , output_path\n]\n\nprint(\">> Running script as test\")\nout = subprocess.check_output(cmd).decode(\"\
      utf-8\")\n\nprint(\">> Checking whether output file exists\")\nassert path.exists(output_path)\n\
      \nprint(\">> Reading h5ad files\")\ninput = ad.read_h5ad(input_path)\noutput\
      \ = ad.read_h5ad(output_path)\nprint(\"input:\", input)\nprint(\"output:\",\
      \ output)\n\nprint(\">> Checking whether output data structures were added\"\
      )\nassert \"lognorm\" in output.layers\nassert output.uns[\"normalization_method\"\
      ] == meta['functionality_name'].removeprefix(\"normalize_\")\n\nprint(\"Checking\
      \ whether data from input was copied properly to output\")\nassert input.n_obs\
      \ == output.n_obs\nassert input.uns[\"dataset_id\"] == output.uns[\"dataset_id\"\
      ]\nassert input.uns[\"raw_dataset_id\"] == output.uns[\"raw_dataset_id\"]\n\n\
      print(\"All checks succeeded!\")\n"
    dest: "generic_test.py"
    is_executable: true
  - type: "file"
    path: "../../../../resources_test/common/pancreas"
  status: "enabled"
  requirements:
    commands: []
  set_wd_to_resources_dir: false
platforms: []
info:
  config: "src/common/normalization/log_cpm/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/common/normalization/log_cpm"
  executable: "target/docker/common/normalization/log_cpm/log_cpm"
  viash_version: "0.6.3"
  git_commit: "762a01f229309e6bb68ac63f529babfdf21e261f"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
