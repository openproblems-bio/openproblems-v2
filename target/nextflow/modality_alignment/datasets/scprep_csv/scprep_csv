#!/usr/bin/env bash

###############################
#    scprep_csv main_build    #
###############################

# This wrapper script is auto-generated by viash 0.5.0-rc4 and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Scott Gigante (maintainer, author) {github: scottgigante}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
   echo "scprep_csv main_build"
echo "Create a modality alignment dataset from CSV using scprep."
   echo
   echo "Options:"

echo "    --id"
echo "        type: string"
echo "        default: citeseq_cbmc"
echo "        The id of the output dataset id"
echo ""


echo "    --input1"
echo "        type: file"
echo "        default: https:/www.ncbi.nlm.nih.gov/geo/download/?acc=GSE100866&format=file&file=GSE100866%5FCBMC%5F8K%5F13AB%5F10X%2DRNA%5Fumi%2Ecsv%2Egz"
echo "        Path or URL to the RNA counts as a gzipped csv file."
echo ""


echo "    --input2"
echo "        type: file"
echo "        default: https:/www.ncbi.nlm.nih.gov/geo/download/?acc=GSE100866&format=file&file=GSE100866%5FCBMC%5F8K%5F13AB%5F10X%2DADT%5Fumi%2Ecsv%2Egz"
echo "        Path or URL to the ADT counts as a gzipped csv file."
echo ""


echo "    --compression"
echo "        type: string"
echo "        default: gzip"
echo "        For on-the-fly decompression of on-disk data. If 'infer' and filepath_or_buffer is path-like, then detect compression from the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no decompression). If using 'zip', the ZIP file must contain only one data file to be read in. Set to None for no decompression."
echo ""


echo "    --test"
echo "        type: boolean_true"
echo "        Subset the dataset"
echo ""


echo "    -o, --output"
echo "        type: file, required parameter, output"
echo "        default: output.h5ad"
echo "        Output h5ad file containing both input matrices data"
echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "scprep_csv main_build"
            exit
            ;;
        --id)
            VIASH_PAR_ID="$2"
            shift 2
            ;;
        --id=*)
            VIASH_PAR_ID=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input1)
            VIASH_PAR_INPUT1="$2"
            shift 2
            ;;
        --input1=*)
            VIASH_PAR_INPUT1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input2)
            VIASH_PAR_INPUT2="$2"
            shift 2
            ;;
        --input2=*)
            VIASH_PAR_INPUT2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --compression)
            VIASH_PAR_COMPRESSION="$2"
            shift 2
            ;;
        --compression=*)
            VIASH_PAR_COMPRESSION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --test)
            VIASH_PAR_TEST=true
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_ID" ]; then
  VIASH_PAR_ID="citeseq_cbmc"
fi
if [ -z "$VIASH_PAR_INPUT1" ]; then
  VIASH_PAR_INPUT1="https:/www.ncbi.nlm.nih.gov/geo/download/?acc=GSE100866&format=file&file=GSE100866%5FCBMC%5F8K%5F13AB%5F10X%2DRNA%5Fumi%2Ecsv%2Egz"
fi
if [ -z "$VIASH_PAR_INPUT2" ]; then
  VIASH_PAR_INPUT2="https:/www.ncbi.nlm.nih.gov/geo/download/?acc=GSE100866&format=file&file=GSE100866%5FCBMC%5F8K%5F13AB%5F10X%2DADT%5Fumi%2Ecsv%2Egz"
fi
if [ -z "$VIASH_PAR_COMPRESSION" ]; then
  VIASH_PAR_COMPRESSION="gzip"
fi
if [ -z "$VIASH_PAR_TEST" ]; then
  VIASH_PAR_TEST="false"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-scprep_csv-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par = {
  'id': $( if [ ! -z ${VIASH_PAR_ID+x} ]; then echo "'$VIASH_PAR_ID'"; else echo None; fi ),
  'input1': $( if [ ! -z ${VIASH_PAR_INPUT1+x} ]; then echo "'$VIASH_PAR_INPUT1'"; else echo None; fi ),
  'input2': $( if [ ! -z ${VIASH_PAR_INPUT2+x} ]; then echo "'$VIASH_PAR_INPUT2'"; else echo None; fi ),
  'compression': $( if [ ! -z ${VIASH_PAR_COMPRESSION+x} ]; then echo "'$VIASH_PAR_COMPRESSION'"; else echo None; fi ),
  'test': $( if [ ! -z ${VIASH_PAR_TEST+x} ]; then echo "'$VIASH_PAR_TEST'.lower() == 'true'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo None; fi )
}

resources_dir = '$VIASH_RESOURCES_DIR'

## VIASH START
## VIASH END

print("Importing libraries")
import scprep

# adding resources dir to system path
# the resources dir contains all files listed in the '.functionality.resources' part of the
# viash config, amongst which is the 'utils.py' file we need.
import sys
sys.path.append(resources_dir)

# importing helper functions from common utils.py file in resources dir
from utils import create_joint_adata
from utils import filter_joint_data_empty_cells
from utils import subset_joint_data

print("Downloading expression datasets from GEO (this might take a while)") 
sys.stdout.flush()

# par["input1"] can be the path to a local file, or a url
adata1 = scprep.io.load_csv(
    par["input1"], cell_axis="col", compression=par["compression"], sparse=True, chunksize=1000
)
adata2 = scprep.io.load_csv(
    par["input2"], cell_axis="col", compression=par["compression"], sparse=True, chunksize=1000
)

print("Transforming into adata")
adata = create_joint_adata(adata1, adata2)
adata = filter_joint_data_empty_cells(adata)

adata.uns["dataset_id"] = par["id"]

if par["test"]:
    print("Subsetting dataset")
    adata = subset_joint_data(adata)
    adata.uns["dataset_id"] = par["id"] + "_test"

print("Writing adata to file")
adata.write(par["output"], compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

python "\$tempscript"

VIASHEOF
