functionality:
  name: "densmap"
  namespace: "dimensionality_reduction/methods"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "The training data"
    info:
      short_description: "Training data"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
          required: true
        - type: "double"
          name: "normalized"
          description: "Normalized expression values"
          required: true
        var:
        - type: "double"
          name: "hvg_score"
          description: "High variability gene score (normalized dispersion). The greater,\
            \ the more variable."
          required: true
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
          required: true
    example:
    - "train.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "A dimensionally reduced dataset"
    info:
      short_description: "Training data"
      slots:
        obsm:
        - type: "double"
          name: "X_emb"
          description: "The dimensionally reduced embedding."
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
        - type: "string"
          name: "method_id"
          description: "A unique identifier for the method"
        - type: "string"
          name: "normalization_id"
          description: "Which normalization was used"
          required: true
    example:
    - "reduced.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "boolean_true"
    name: "--no_pca"
    alternatives: []
    description: "Do not apply PCA with 50 dimensions before running UMAP."
    direction: "input"
    dest: "par"
  argument_groups: []
  resources:
  - type: "python_script"
    path: "script.py"
    is_executable: true
  description: "density-preserving based on UMAP"
  test_resources:
  - type: "file"
    path: "../../../../resources_test/dimensionality_reduction/pancreas/"
  - type: "python_script"
    text: "import anndata as ad\nimport subprocess\nfrom os import path\n\ninput_path\
      \ = meta[\"resources_dir\"] + \"/pancreas/train.h5ad\"\noutput_path = \"reduced.h5ad\"\
      \ncmd = [\n    meta['executable'],\n    \"--input\", input_path,\n    \"--output\"\
      , output_path\n]\n\nprint(\">> Checking whether input file exists\")\nassert\
      \ path.exists(input_path)\n\nprint(\">> Running script as test\")\nout = subprocess.run(cmd,\
      \ check=True, capture_output=True, text=True)\n\nprint(\">> Checking whether\
      \ output file exists\")\nassert path.exists(output_path)\n\nprint(\">> Reading\
      \ h5ad files\")\ninput = ad.read_h5ad(input_path)\noutput = ad.read_h5ad(output_path)\n\
      \nprint(\"input:\", input)\nprint(\"output:\", output)\n\nprint(\">> Checking\
      \ whether predictions were added\")\nassert \"X_emb\" in output.obsm\nassert\
      \ meta['functionality_name'] == output.uns[\"method_id\"]\nassert 'normalization_id'\
      \ in output.uns\n\nprint(\">> Checking whether data from input was copied properly\
      \ to output\")\nassert input.n_obs == output.n_obs\nassert input.uns[\"dataset_id\"\
      ] == output.uns[\"dataset_id\"]\n\nprint(\"All checks succeeded!\")"
    dest: "generic_test.py"
    is_executable: true
  info:
    type: "method"
    label: "densMAP"
    v1_url: "openproblems/tasks/dimensionality_reduction/methods/densmap.py"
    v1_commit: "c2470ce02e6f196267cec1c554ba7ae389c0956a"
    preferred_normalization: "log_cpm"
  status: "enabled"
  requirements:
    commands: []
  set_wd_to_resources_dir: false
platforms:
- type: "docker"
  id: "docker"
  image: "python:3.10"
  target_organization: "openproblems-bio"
  target_registry: "ghcr.io"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  run_args: []
  target_image_source: "https://github.com/openproblems-bio/openproblems-v2"
  setup:
  - type: "python"
    user: false
    packages:
    - "scanpy"
    - "anndata>=0.8"
    - "pyyaml"
    - "umap-learn"
    pip: []
    pypi: []
    git: []
    github: []
    gitlab: []
    mercurial: []
    svn: []
    bazaar: []
    url: []
    script: []
    upgrade: true
  test_setup: []
- type: "nextflow"
  id: "nextflow"
  variant: "vdsl3"
  directives:
    accelerator: {}
    conda: []
    containerOptions: []
    label:
    - "highmem"
    - "highcpu"
    module: []
    pod: []
    publishDir: []
    queue: []
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: true
    transcript: false
    publish: false
  debug: false
  container: "docker"
info:
  config: "/home/runner/work/openproblems-v2/openproblems-v2/src/dimensionality_reduction/methods/densmap/config.vsh.yaml"
  platform: "docker"
  output: "/home/runner/work/openproblems-v2/openproblems-v2/target/docker/dimensionality_reduction/methods/densmap"
  executable: "/home/runner/work/openproblems-v2/openproblems-v2/target/docker/dimensionality_reduction/methods/densmap/densmap"
  viash_version: "0.6.6"
  git_commit: "1e5b094bf3de62b80cb194ed22678bbd8d2b8299"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
