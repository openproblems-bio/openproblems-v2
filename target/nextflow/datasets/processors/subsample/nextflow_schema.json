{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "subsample",
    "description": "Subsample an h5ad file",
    "type": "object",
    "definitions": {
      "arguments" : {
        "title": "Arguments",
        "type": "object",
        "description": "No description",
        "properties": {
          "n_obs": {
            "type": "integer",
            "description": "Type: `integer`, default: `500`. Maximum number of observations to be kept",
            "help_text": "Type: `integer`, default: `500`. Maximum number of observations to be kept. It might end up being less because empty cells / genes are removed.",
            "default": "500"
          },
          "n_vars": {
            "type": "integer",
            "description": "Type: `integer`, default: `500`. Maximum number of variables to be kept",
            "help_text": "Type: `integer`, default: `500`. Maximum number of variables to be kept. It might end up being less because empty cells / genes are removed.",
            "default": "500"
          },
          "keep_features": {
            "type": "string",
            "description": "Type: List of `string`, multiple_sep: `\":\"`. A list of genes to keep",
            "help_text": "Type: List of `string`, multiple_sep: `\":\"`. A list of genes to keep.",
            "default": ""
          },
          "keep_celltype_categories": {
            "type": "string",
            "description": "Type: List of `string`, multiple_sep: `\":\"`. Categories indexes to be selected",
            "help_text": "Type: List of `string`, multiple_sep: `\":\"`. Categories indexes to be selected",
            "default": ""
          },
          "keep_batch_categories": {
            "type": "string",
            "description": "Type: List of `string`, multiple_sep: `\":\"`. Categories indexes to be selected",
            "help_text": "Type: List of `string`, multiple_sep: `\":\"`. Categories indexes to be selected",
            "default": ""
          },
          "even": {
            "type": "boolean",
            "description": "Type: `boolean_true`, default: `false`. Subsample evenly from different batches",
            "help_text": "Type: `boolean_true`, default: `false`. Subsample evenly from different batches",
            "default": "False"
          },
          "seed": {
            "type": "integer",
            "description": "Type: `integer`, example: `123`. A seed for the subsampling",
            "help_text": "Type: `integer`, example: `123`. A seed for the subsampling.",
            "default": ""
          }
          
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "properties": {
          "publish_dir": {
            "type": "string",
            "description": "Type: `string`, required, example: `\"output/\"`. Path to an output directory",
            "help_text": "Type: `string`, required, example: `\"output/\"`. Path to an output directory.",
            "default": ""
          },
          "param_list": {
            "type": "string",
            "description": "Type: `string`, example: `\"my_params.yaml\"`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
            "help_text": "Type: `string`, example: `\"my_params.yaml\"`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.","hidden": true,
            "default": ""
          }
          
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/arguments"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      ]
}
