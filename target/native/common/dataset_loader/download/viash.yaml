functionality:
  name: "download"
  namespace: "common/dataset_loader"
  version: "main_build"
  authors:
  - name: "Michaela Mueller "
    roles:
    - "maintainer"
    - "author"
    props:
      github: "mumichae"
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    description: "Output h5ad file of the cleaned dataset"
    example:
    - "output.h5ad"
    default: []
    must_exist: false
    required: true
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--url"
    alternatives: []
    description: "URL of dataset"
    example: []
    default: []
    required: true
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--name"
    alternatives: []
    description: "Name of dataset"
    example:
    - "pbmc"
    default: []
    required: true
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--obs_celltype"
    alternatives: []
    description: "Location of where to find the observation cell types."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--obs_batch"
    alternatives: []
    description: "Location of where to find the observation batch IDs."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--obs_tissue"
    alternatives: []
    description: "Location of where to find the observation tissue information."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  argument_groups: []
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # download main_build
      # 
      # This wrapper script is auto-generated by viash 0.5.15 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      # 
      # Component authors:
      #  * Michaela Mueller  (maintainer, author) {github: mumichae}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TEMP}
        VIASH_TEMP=${VIASH_TEMP:-/tmp}
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="download"
      VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "download main_build"
        echo ""
        echo "Download a dataset."
        echo ""
        echo "Arguments:"
        echo "    -o, --output"
        echo "        type: file, required parameter, output"
        echo "        example: output.h5ad"
        echo "        Output h5ad file of the cleaned dataset"
        echo ""
        echo "    --url"
        echo "        type: string, required parameter"
        echo "        URL of dataset"
        echo ""
        echo "    --name"
        echo "        type: string, required parameter"
        echo "        example: pbmc"
        echo "        Name of dataset"
        echo ""
        echo "    --obs_celltype"
        echo "        type: string"
        echo "        Location of where to find the observation cell types."
        echo ""
        echo "    --obs_batch"
        echo "        type: string"
        echo "        Location of where to find the observation batch IDs."
        echo ""
        echo "    --obs_tissue"
        echo "        type: string"
        echo "        Location of where to find the observation tissue information."
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "download main_build"
                  exit
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -o)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --url)
                  VIASH_PAR_URL="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --url. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --url=*)
                  VIASH_PAR_URL=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --name)
                  VIASH_PAR_NAME="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --name. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --name=*)
                  VIASH_PAR_NAME=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --obs_celltype)
                  VIASH_PAR_OBS_CELLTYPE="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_celltype. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --obs_celltype=*)
                  VIASH_PAR_OBS_CELLTYPE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --obs_batch)
                  VIASH_PAR_OBS_BATCH="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_batch. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --obs_batch=*)
                  VIASH_PAR_OBS_BATCH=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --obs_tissue)
                  VIASH_PAR_OBS_TISSUE="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_tissue. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --obs_tissue=*)
                  VIASH_PAR_OBS_TISSUE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_URL" ]; then
        ViashError '--url' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_NAME" ]; then
        ViashError '--name' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      
      
      cat << VIASHEOF | bash
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-download-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      
      print("Importing libraries")
      import scanpy as sc
      import tempfile
      import os
      import urllib
      
      _FAKE_HEADERS = [("User-Agent", "Mozilla/5.0")]
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      par = {
        'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'${VIASH_PAR_OUTPUT//\'/\\\'}'"; else echo None; fi ),
        'url': $( if [ ! -z ${VIASH_PAR_URL+x} ]; then echo "'${VIASH_PAR_URL//\'/\\\'}'"; else echo None; fi ),
        'name': $( if [ ! -z ${VIASH_PAR_NAME+x} ]; then echo "'${VIASH_PAR_NAME//\'/\\\'}'"; else echo None; fi ),
        'obs_celltype': $( if [ ! -z ${VIASH_PAR_OBS_CELLTYPE+x} ]; then echo "'${VIASH_PAR_OBS_CELLTYPE//\'/\\\'}'"; else echo None; fi ),
        'obs_batch': $( if [ ! -z ${VIASH_PAR_OBS_BATCH+x} ]; then echo "'${VIASH_PAR_OBS_BATCH//\'/\\\'}'"; else echo None; fi ),
        'obs_tissue': $( if [ ! -z ${VIASH_PAR_OBS_TISSUE+x} ]; then echo "'${VIASH_PAR_OBS_TISSUE//\'/\\\'}'"; else echo None; fi )
      }
      meta = {
        'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
        'resources_dir': '$VIASH_META_RESOURCES_DIR',
        'executable': '$VIASH_META_EXECUTABLE',
        'temp_dir': '$VIASH_TEMP'
      }
      
      resources_dir = '$VIASH_META_RESOURCES_DIR'
      
      ## VIASH END
      
      with tempfile.TemporaryDirectory() as tempdir:
          print("Downloading", par['url'], flush=True)
          filepath = os.path.join(tempdir, "dataset.h5ad")
      
          with open(filepath, "wb") as filehandle:
              opener = urllib.request.build_opener()
              opener.addheaders = _FAKE_HEADERS
              urllib.request.install_opener(opener)
              with urllib.request.urlopen(par["url"]) as urlhandle:
                  filehandle.write(urlhandle.read())
      
          print("Reading file")
          adata = sc.read_h5ad(filepath)
      
      print("Copying .layers['counts'] to .X")
      if "counts" in adata.layers:
          adata.X = adata.layers["counts"]
          del adata.layers["counts"]
      
      print("Setting .uns['dataset_id']")
      adata.uns["dataset_id"] = par["name"]
      
      print("Setting .obs['celltype']")
      if par["obs_celltype"]:
          if par["obs_celltype"] in adata.obs:
              adata.obs["celltype"] = adata.obs[par["obs_celltype"]]
          else:
              print(f"Warning: key '{par['obs_celltype']}' could not be found in adata.obs.")
      
      print("Setting .obs['batch']")
      if par["obs_batch"]:
          if par["obs_batch"] in adata.obs:
              adata.obs["batch"] = adata.obs[par["obs_batch"]]
          else:
              print(f"Warning: key '{par['obs_batch']}' could not be found in adata.obs.")
      
      print("Setting .obs['tissue']")
      if par["obs_tissue"]:
          if par["obs_tissue"] in adata.obs:
              adata.obs["tissue"] = adata.obs[par["obs_tissue"]]
          else:
              print(f"Warning: key '{par['obs_tissue']}' could not be found in adata.obs.")
      
      print("Remove cells or genes with 0 counts")
      sc.pp.filter_genes(adata, min_cells=1)
      sc.pp.filter_cells(adata, min_counts=2)
      
      print("Writing adata to file")
      adata.write(par["output"], compression="gzip")
      
      VIASHMAIN
      python "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "download"
    is_executable: true
  description: "Download a dataset."
  test_resources:
  - type: "python_script"
    path: "test.py"
    is_executable: true
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
  enabled: true
platform:
  type: "native"
  id: "native"
platforms: []
info:
  config: "src/common/dataset_loader/download/config.vsh.yaml"
  platform: "native"
  output: "target/native/common/dataset_loader/download"
  executable: "target/native/common/dataset_loader/download/download"
  viash_version: "0.5.15"
  git_commit: "44d080555303dc10817b0cd2f1f9c48e81a1b53b"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
