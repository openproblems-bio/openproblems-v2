#!/usr/bin/env bash

# scanvi_hvg main_build
# 
# This wrapper script is auto-generated by viash 0.5.15 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Scott Gigante (author) {github: scottgigante}
#  * Vinicius Chagas (maintainer) {github: chagasVinicius}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# backwards compatibility
VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="scanvi_hvg"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "scanvi_hvg main_build"
  echo ""
  echo "Probabilistic harmonization and annotation of single-cell transcriptomics data"
  echo "with deep generative models."
  echo ""
  echo "Arguments:"
  echo "    -i, --input"
  echo "        type: file, required parameter"
  echo "        example: input.h5ad"
  echo "        Input file that will be used to generate predictions"
  echo ""
  echo "    --n_hidden"
  echo "        type: integer, required parameter"
  echo "        default: 10"
  echo ""
  echo "    --n_layers"
  echo "        type: integer, required parameter"
  echo "        default: 1"
  echo ""
  echo "    --n_latent"
  echo "        type: integer, required parameter"
  echo "        default: 10"
  echo ""
  echo "    --n_top_genes"
  echo "        type: integer, required parameter"
  echo "        default: 2000"
  echo ""
  echo "    --span"
  echo "        type: double"
  echo ""
  echo "    --max_epochs"
  echo "        type: integer"
  echo ""
  echo "    --limit_brain_batches"
  echo "        type: integer"
  echo ""
  echo "    --limit_val_batches"
  echo "        type: integer"
  echo ""
  echo "    -o, --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5ad"
  echo "        Output data containing predictions"
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "scanvi_hvg main_build"
            exit
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -i)
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -i. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --n_hidden)
            VIASH_PAR_N_HIDDEN="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_hidden. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --n_hidden=*)
            VIASH_PAR_N_HIDDEN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_layers)
            VIASH_PAR_N_LAYERS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_layers. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --n_layers=*)
            VIASH_PAR_N_LAYERS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_latent)
            VIASH_PAR_N_LATENT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_latent. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --n_latent=*)
            VIASH_PAR_N_LATENT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_top_genes)
            VIASH_PAR_N_TOP_GENES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_top_genes. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --n_top_genes=*)
            VIASH_PAR_N_TOP_GENES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --span)
            VIASH_PAR_SPAN="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --span. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --span=*)
            VIASH_PAR_SPAN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --max_epochs)
            VIASH_PAR_MAX_EPOCHS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --max_epochs. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --max_epochs=*)
            VIASH_PAR_MAX_EPOCHS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --limit_brain_batches)
            VIASH_PAR_LIMIT_BRAIN_BATCHES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --limit_brain_batches. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --limit_brain_batches=*)
            VIASH_PAR_LIMIT_BRAIN_BATCHES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --limit_val_batches)
            VIASH_PAR_LIMIT_VAL_BATCHES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --limit_val_batches. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --limit_val_batches=*)
            VIASH_PAR_LIMIT_VAL_BATCHES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_N_HIDDEN" ]; then
  ViashError '--n_hidden' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_N_LAYERS" ]; then
  ViashError '--n_layers' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_N_LATENT" ]; then
  ViashError '--n_latent' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_N_TOP_GENES" ]; then
  ViashError '--n_top_genes' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi



# check whether parameters values are of the right type

if [[ -n "$VIASH_PAR_N_HIDDEN" ]]; then
  if ! [[ "$VIASH_PAR_N_HIDDEN" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--n_hidden' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_N_LAYERS" ]]; then
  if ! [[ "$VIASH_PAR_N_LAYERS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--n_layers' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_N_LATENT" ]]; then
  if ! [[ "$VIASH_PAR_N_LATENT" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--n_latent' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_N_TOP_GENES" ]]; then
  if ! [[ "$VIASH_PAR_N_TOP_GENES" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--n_top_genes' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_SPAN" ]]; then
  if ! [[ "$VIASH_PAR_SPAN" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--span' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_MAX_EPOCHS" ]]; then
  if ! [[ "$VIASH_PAR_MAX_EPOCHS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--max_epochs' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_LIMIT_BRAIN_BATCHES" ]]; then
  if ! [[ "$VIASH_PAR_LIMIT_BRAIN_BATCHES" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--limit_brain_batches' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_LIMIT_VAL_BATCHES" ]]; then
  if ! [[ "$VIASH_PAR_LIMIT_VAL_BATCHES" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--limit_val_batches' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi



# check whether parameters values are of the right type











cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-scanvi_hvg-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'${VIASH_PAR_INPUT//\'/\\\'}'"; else echo None; fi ),
  'n_hidden': $( if [ ! -z ${VIASH_PAR_N_HIDDEN+x} ]; then echo "int('${VIASH_PAR_N_HIDDEN//\'/\\\'}')"; else echo None; fi ),
  'n_layers': $( if [ ! -z ${VIASH_PAR_N_LAYERS+x} ]; then echo "int('${VIASH_PAR_N_LAYERS//\'/\\\'}')"; else echo None; fi ),
  'n_latent': $( if [ ! -z ${VIASH_PAR_N_LATENT+x} ]; then echo "int('${VIASH_PAR_N_LATENT//\'/\\\'}')"; else echo None; fi ),
  'n_top_genes': $( if [ ! -z ${VIASH_PAR_N_TOP_GENES+x} ]; then echo "int('${VIASH_PAR_N_TOP_GENES//\'/\\\'}')"; else echo None; fi ),
  'span': $( if [ ! -z ${VIASH_PAR_SPAN+x} ]; then echo "float('${VIASH_PAR_SPAN//\'/\\\'}')"; else echo None; fi ),
  'max_epochs': $( if [ ! -z ${VIASH_PAR_MAX_EPOCHS+x} ]; then echo "int('${VIASH_PAR_MAX_EPOCHS//\'/\\\'}')"; else echo None; fi ),
  'limit_brain_batches': $( if [ ! -z ${VIASH_PAR_LIMIT_BRAIN_BATCHES+x} ]; then echo "int('${VIASH_PAR_LIMIT_BRAIN_BATCHES//\'/\\\'}')"; else echo None; fi ),
  'limit_val_batches': $( if [ ! -z ${VIASH_PAR_LIMIT_VAL_BATCHES+x} ]; then echo "int('${VIASH_PAR_LIMIT_VAL_BATCHES//\'/\\\'}')"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'${VIASH_PAR_OUTPUT//\'/\\\'}'"; else echo None; fi )
}
meta = {
  'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
  'resources_dir': '$VIASH_META_RESOURCES_DIR',
  'executable': '$VIASH_META_EXECUTABLE',
  'temp_dir': '$VIASH_TEMP'
}

resources_dir = '$VIASH_META_RESOURCES_DIR'

## VIASH END
resources_dir="../"

import sys
sys.path.append(resources_dir)
sys.path.append(meta['resources_dir'])
import scvi
import scanpy as sc
from tools import scanvi, hvg

print("Load input data")
adata = sc.read(par['input'])

hvg_kwargs = {
    "flavor": "seurat_v3",
    "inplace": False,
    "n_top_genes": par['n_top_genes'],
    "batch_key": "batch",

}

# check parameters for test exists
par.get("span") and hvg_kwargs.update({"span": par['span']})

train_kwargs = {
    "train_size": 0.9,
    "early_stopping": True,
}

# check parameters for test exists
par.get("max_epochs") and train_kwargs.update({"max_epochs": par['max_epochs']})
par.get("limit_train_batches") and train_kwargs.update({"limit_train_batches": par['limit_train_batches']})
par.get("limit_val_batches") and train_kwargs.update({"limit_val_batches": par['limit_val_batches']})

hvg_df = hvg(adata, **hvg_kwargs)
bdata = adata[:, hvg_df.highly_variable].copy()
adata.obs["celltype_pred"] = scanvi(bdata, par['n_hidden'], par['n_latent'], par['n_layers'],  **train_kwargs)
adata.uns["method_id"] = meta["functionality_name"]

print("Write data")
adata.write(par['output'], compression="gzip")

VIASHMAIN
python "\$tempscript" &
wait "\$!"

VIASHEOF
