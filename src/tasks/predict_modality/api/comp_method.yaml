functionality:
  arguments:
    - name: "--input_train_mod1"
      __merge__: anndata_masked_mod1.yaml
    - name: "--input_train_mod2"
      __merge__: anndata_masked_mod2.yaml
    - name: "--input_test_mod1"
      __merge__: anndata_masked_mod1.yaml
    - name: "--output"
      __merge__: anndata_prediction.yaml
      direction: output  
  test_resources:
    - path: ../../../../resources_test   
    - type: python_script
      path: generic_test.py
      text: |
        from os import path
        import subprocess
        import anndata as ad
        from scipy import sparse

        input_train_mod1 = "resources_test/predict_modality/bmmc_cite/cite_train_mod1.h5ad"
        input_train_mod2 = "resources_test/predict_modality/bmmc_cite/cite_train_mod2.h5ad"
        input_test_mod1 = "resources_test/predict_modality/bmmc_cite/cite_test_mod1.h5ad"
        output_path = "output.h5ad"

        cmd = [
            meta['executable'],
            "--input_train_mod1", input_train_mod1,
            "--input_train_mod2", input_train_mod2,
            "--input_test_mod1", input_test_mod1,
            "--output", output_path
        ]

        print(">> Running script as test", flush=True)
        out = subprocess.run(cmd, stderr=subprocess.STDOUT, check=True)

        print("> Checking whether output files were created", flush=True)
        assert path.exists(output_path)

        # NOTE: v1 uses solution file to check but is this the best method ?
        # TODO: update test
        print("> Reading h5ad files", flush=True)
        input_mod1 = ad.read_h5ad(input_train_mod1)
        output = ad.read_h5ad(output_path)

        print("> Checking contents of output.h5ad", flush=True)
        assert output.uns['dataset_id'] == input_mod1.uns['dataset_id']
        assert output.uns['method_id'] == meta['functionality_name']
        # assert output.n_obs == input_mod1.n_obs
        # assert output.n_vars >= 1
        # assert output.n_vars <= 100
        # assert all(output.obs_names == input_mod1.obs_names)
        # assert sparse.issparse(output.obsm['X_emb'])

        print("> Test succeeded!", flush=True)