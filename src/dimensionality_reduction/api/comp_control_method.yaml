functionality:
  info:
    type: control_method
  arguments:
    - name: "--input"
      __merge__: anndata_dataset.yaml
    - name: "--output"
      __merge__: anndata_reduced.yaml
      direction: output
  test_resources:
    - path: ../../../../resources_test/dimensionality_reduction/pancreas/
    - type: python_script
      path: ../../../common/unit_test/check_method_config.py
    - type: python_script
      path: generic_test.py
      text: |
        import anndata as ad
        import subprocess
        from os import path

        input_path = meta["resources_dir"] + "/pancreas/train.h5ad"
        output_path = "reduced.h5ad"
        n_pca = 50
        cmd = [
            meta['executable'],
            "--input", input_path,
            "--output", output_path,
            "--n_pca", str(n_pca)
        ]

        print(">> Checking whether input file exists", flush=True)
        assert path.exists(input_path)

        print(">> Running script as test", flush=True)
        out = subprocess.run(cmd)
        # out = subprocess.run(cmd, check=True, capture_output=True, text=True)

        print(">> Checking whether output file exists", flush=True)
        assert path.exists(output_path)

        print(">> Reading h5ad files", flush=True)
        input = ad.read_h5ad(input_path)
        output = ad.read_h5ad(output_path)

        print("input:", input, flush=True)
        print("output:", output, flush=True)

        print(">> Checking whether predictions were added", flush=True)
        assert "X_emb" in output.obsm
        assert meta['functionality_name'] == output.uns["method_id"]

        print(">> Checking whether data from input was copied properly to output", flush=True)
        assert input.n_obs == output.n_obs
        assert input.uns["dataset_id"] == output.uns["dataset_id"]

        print("All checks succeeded!", flush=True)