functionality:
  name: "f1"
  namespace: "label_projection/metrics"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input_solution"
    alternatives: []
    description: "The solution for the test data"
    info:
      short_description: "Solution"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        - type: "double"
          name: "log_cpm"
          description: "CPM normalized counts, log transformed"
        - type: "double"
          name: "log_scran_pooling"
          description: "Scran pooling normalized counts, log transformed"
        - type: "double"
          name: "sqrt_cpm"
          description: "CPM normalized counts, sqrt transformed"
        obs:
        - type: "string"
          name: "label"
          description: "Ground truth cell type labels"
        - type: "string"
          name: "batch"
          description: "Batch information"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
    example:
    - "solution.h5ad"
    default: []
    must_exist: false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--input_prediction"
    alternatives: []
    description: "The prediction file"
    info:
      short_description: "Prediction"
      slots:
        obs:
        - type: "string"
          name: "label_pred"
          description: "Predicted labels for the test cells."
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
        - type: "string"
          name: "method_id"
          description: "A unique identifier for the method"
    example:
    - "prediction.h5ad"
    default: []
    must_exist: false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "Metric score file"
    info:
      short_description: "Score"
      slots:
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
        - type: "string"
          name: "method_id"
          description: "A unique identifier for the method"
        - type: "string"
          name: "metric_ids"
          description: "One or more unique metric identifiers"
          multiple: true
        - type: "double"
          name: "metric_values"
          description: "The metric values obtained for the given prediction. Must\
            \ be of same length as 'metric_ids'."
          multiple: true
    example:
    - "output.h5ad"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  argument_groups: []
  resources:
  - type: "python_script"
    path: "script.py"
    is_executable: true
  description: "balanced F-score or F-measure"
  test_resources:
  - type: "file"
    path: "../../../../resources_test/label_projection/pancreas"
  - type: "python_script"
    text: "import anndata as ad\nimport subprocess\nfrom os import path\n\ninput_prediction_path\
      \ = meta[\"resources_dir\"] + \"/pancreas/knn.h5ad\"\ninput_solution_path =\
      \ meta[\"resources_dir\"] + \"/pancreas/solution.h5ad\"\noutput_path = \"output.h5ad\"\
      \n\ncmd = [\n  meta['executable'],\n  \"--input_prediction\", input_prediction_path,\n\
      \  \"--input_solution\", input_solution_path,\n  \"--output\", output_path\n\
      ]\n\nprint(\">> Running script as test\")\nout = subprocess.check_output(cmd).decode(\"\
      utf-8\")\n\nprint(\">> Checking whether output file exists\")\nassert path.exists(output_path)\n\
      \ninput_solution = ad.read_h5ad(input_solution_path)\ninput_prediction = ad.read_h5ad(input_prediction_path)\n\
      output = ad.read_h5ad(output_path)\n\nprint(\"Checking whether data from input\
      \ was copied properly to output\")\nassert output.uns[\"dataset_id\"] == input_prediction.uns[\"\
      dataset_id\"]\nassert output.uns[\"method_id\"] == input_prediction.uns[\"method_id\"\
      ]\nassert output.uns[\"metric_ids\"] is not None\nassert output.uns[\"metric_values\"\
      ] is not None\n\n# TODO: check whether the metric ids are all in .functionality.info\n\
      \nprint(\"All checks succeeded!\")"
    dest: "format_check.py"
    is_executable: true
  info:
    v1_url: "openproblems/tasks/label_projection/metrics/f1.py"
    v1_commit: "bb16ca05ae1ce20ce59bfa7a879641b9300df6b0"
    metrics:
    - id: "f1_weighted"
      label: "F1 weighted"
      description: "Calculates the F1 score for each label, and find their average\
        \ weighted by support (the number of true instances for each label). This\
        \ alters 'macro' to account for label imbalance; it can result in an F-score\
        \ that is not between precision and recall."
      min: 0
      max: 1
      maximise: true
    - id: "f1_macro"
      label: "F1 macro"
      description: "Calculates the F1 score for each label, and find their unweighted\
        \ mean. This does not take label imbalance into account."
      min: 0
      max: 1
      maximise: true
    - id: "f1_micro"
      label: "F1 micro"
      description: "Calculates the F1 score globally by counting the total true positives,\
        \ false negatives and false positives."
      min: 0
      max: 1
      maximise: true
  status: "enabled"
  requirements:
    commands: []
  set_wd_to_resources_dir: false
platforms: []
info:
  config: "src/label_projection/metrics/f1/config.vsh.yaml"
  platform: "nextflow"
  output: "target/nextflow/label_projection/metrics/f1"
  viash_version: "0.6.3"
  git_commit: "210bb604bd9a1e9f89a501f24ef700b09f3b41a1"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
