functionality:
  name: "poisson"
  namespace: "denoising/metrics"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input_test"
    alternatives: []
    description: "The test data"
    info:
      short_description: "Test data"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
    example:
    - "test.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--input_denoised"
    alternatives: []
    description: "The denoised data"
    info:
      short_description: "Denoised data"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        - type: "integer"
          name: "denoised"
          description: "denoised data"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
        - type: "string"
          name: "method_id"
          description: "A unique identifier for the method"
    example:
    - "denoised.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "Metric score file"
    info:
      short_description: "Score"
      slots:
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
        - type: "string"
          name: "method_id"
          description: "A unique identifier for the method"
        - type: "string"
          name: "metric_ids"
          description: "One or more unique metric identifiers"
          multiple: true
        - type: "double"
          name: "metric_values"
          description: "The metric values obtained for the given prediction. Must\
            \ be of same length as 'metric_ids'."
          multiple: true
    example:
    - "output.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  argument_groups: []
  resources:
  - type: "python_script"
    path: "script.py"
    is_executable: true
  description: "Poisson loss"
  test_resources:
  - type: "file"
    path: "../../../../resources_test/denoising/pancreas"
  - type: "python_script"
    text: "import anndata as ad\nimport subprocess\nfrom os import path\n\ninput_denoised_path\
      \ = meta[\"resources_dir\"] + \"/pancreas/magic.h5ad\"\ninput_test_path = meta[\"\
      resources_dir\"] + \"/pancreas/test.h5ad\"\noutput_path = \"output.h5ad\"\n\n\
      cmd = [\n  meta['executable'],\n  \"--input_denoised\", input_denoised_path,\n\
      \  \"--input_test\", input_test_path,\n  \"--output\", output_path\n]\n\nprint(\"\
      >> Running script as test\")\nout = subprocess.run(cmd, check=True, capture_output=True,\
      \ text=True)\n\nprint(\">> Checking whether output file exists\")\nassert path.exists(output_path)\n\
      \ninput_denoised = ad.read_h5ad(input_denoised_path)\ninput_test = ad.read_h5ad(input_test_path)\n\
      output = ad.read_h5ad(output_path)\n\nprint(\"Checking whether data from input\
      \ was copied properly to output\")\nassert output.uns[\"dataset_id\"] == input_denoised.uns[\"\
      dataset_id\"]\nassert output.uns[\"method_id\"] == input_denoised.uns[\"method_id\"\
      ]\nassert output.uns[\"metric_ids\"] is not None\nassert output.uns[\"metric_values\"\
      ] is not None\n\n# TODO: check whether the metric ids are all in .functionality.info\n\
      \nprint(\"All checks succeeded!\")"
    dest: "format_check.py"
    is_executable: true
  info:
    v1_url: "openproblems/tasks/denoising/metrics/poisson.py"
    v1_commit: "4524f7bbcc4ea94cfb4acf1bd7f7c93c1ba7d0c9"
    metrics:
    - id: "poisson"
      label: "poisson"
      description: "Poisson loss: measure the mean of the inconsistencies between\
        \ predicted and target"
      maximize: false
      min: 0
      max: "+inf"
  status: "enabled"
  requirements:
    commands: []
  set_wd_to_resources_dir: false
platforms:
- type: "docker"
  id: "docker"
  image: "python:3.10"
  target_organization: "openproblems-bio"
  target_registry: "ghcr.io"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  run_args: []
  target_image_source: "https://github.com/openproblems-bio/openproblems-v2"
  setup:
  - type: "python"
    user: false
    packages:
    - "anndata>=0.8"
    - "scprep"
    pip: []
    pypi: []
    git: []
    github: []
    gitlab: []
    mercurial: []
    svn: []
    bazaar: []
    url: []
    script: []
    upgrade: true
  test_setup: []
- type: "nextflow"
  id: "nextflow"
  variant: "vdsl3"
  directives:
    accelerator: {}
    conda: []
    containerOptions: []
    label:
    - "midmem"
    - "midcpu"
    module: []
    pod: []
    publishDir: []
    queue: []
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: true
    transcript: false
    publish: false
  debug: false
  container: "docker"
info:
  config: "/home/runner/work/openproblems-v2/openproblems-v2/src/denoising/metrics/poisson/config.vsh.yaml"
  platform: "docker"
  output: "/home/runner/work/openproblems-v2/openproblems-v2/target/docker/denoising/metrics/poisson"
  executable: "/home/runner/work/openproblems-v2/openproblems-v2/target/docker/denoising/metrics/poisson/poisson"
  viash_version: "0.6.6"
  git_commit: "da6acc2a5db908d7ad9211e3abb0f85aa0039252"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
