functionality:
  name: "get_task_info"
  namespace: "common"
  version: "integration_build"
  arguments:
  - type: "file"
    name: "--input"
    description: "the root repo"
    info: null
    example:
    - "../openproblems-v2"
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "string"
    name: "--task_id"
    description: "A task dir"
    info: null
    example:
    - "label_projection"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output"
    description: "Output json"
    info: null
    default:
    - "output.json"
    must_exist: true
    create_parent: true
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  resources:
  - type: "python_script"
    path: "script.py"
    is_executable: true
  description: "Extract task info"
  test_resources:
  - type: "file"
    path: "src"
    dest: "openproblems-v2/src"
  - type: "file"
    path: "_viash.yaml"
    dest: "openproblems-v2/_viash.yaml"
  - type: "python_script"
    text: "import subprocess\nfrom os import path\nimport json\n\ninput_path = meta[\"\
      resources_dir\"] + \"/openproblems-v2\"\ntask_id = \"denoising\"\noutput_path\
      \ = \"output.json\"\n\ncmd = [\n    meta['executable'],\n    \"--input\", input_path,\n\
      \    \"--task_id\", task_id,\n    \"--output\", output_path,\n]\n\nprint(\"\
      >> Running script as test\", flush=True)\nout = subprocess.run(cmd, stderr=subprocess.STDOUT)\n\
      \nif out.stdout:\n  print(out.stdout)\n\nif out.returncode:\n  print(f\"script:\
      \ '{cmd}' exited with an error.\")\n  exit(out.returncode)\n\nprint(\">> Checking\
      \ whether output file exists\", flush=True)\nassert path.exists(output_path),\
      \ \"Output does not exist\"\n\nprint(\">> Reading json file\", flush=True)\n\
      with open(output_path, 'r') as f:\n    out = json.load(f)\n    print(out)\n\n\
      print(\"All checks succeeded!\", flush=True)"
    dest: "generic_test.py"
    is_executable: true
  info: null
  status: "enabled"
  set_wd_to_resources_dir: false
platforms:
- type: "docker"
  id: "docker"
  image: "ghcr.io/openproblems-bio/base_python:1.0.1"
  target_organization: "openproblems-bio"
  target_registry: "ghcr.io"
  namespace_separator: "/"
  resolve_volume: "Automatic"
  chown: true
  setup_strategy: "ifneedbepullelsecachedbuild"
  target_image_source: "https://github.com/openproblems-bio/openproblems-v2"
  entrypoint: []
  cmd: null
- type: "nextflow"
  id: "nextflow"
  directives:
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: true
    transcript: false
    publish: false
  config:
    labels:
      mem1gb: "memory = 1.GB"
      mem2gb: "memory = 2.GB"
      mem4gb: "memory = 4.GB"
      mem8gb: "memory = 8.GB"
      mem16gb: "memory = 16.GB"
      mem32gb: "memory = 32.GB"
      mem64gb: "memory = 64.GB"
      mem128gb: "memory = 128.GB"
      mem256gb: "memory = 256.GB"
      mem512gb: "memory = 512.GB"
      mem1tb: "memory = 1.TB"
      mem2tb: "memory = 2.TB"
      mem4tb: "memory = 4.TB"
      mem8tb: "memory = 8.TB"
      mem16tb: "memory = 16.TB"
      mem32tb: "memory = 32.TB"
      mem64tb: "memory = 64.TB"
      mem128tb: "memory = 128.TB"
      mem256tb: "memory = 256.TB"
      mem512tb: "memory = 512.TB"
      cpu1: "cpus = 1"
      cpu2: "cpus = 2"
      cpu5: "cpus = 5"
      cpu10: "cpus = 10"
      cpu20: "cpus = 20"
      cpu50: "cpus = 50"
      cpu100: "cpus = 100"
      cpu200: "cpus = 200"
      cpu500: "cpus = 500"
      cpu1000: "cpus = 1000"
  debug: false
  container: "docker"
- type: "native"
  id: "native"
info:
  config: "/home/runner/work/openproblems-v2/openproblems-v2/src/common/get_task_info/config.vsh.yaml"
  platform: "nextflow"
  output: "/home/runner/work/openproblems-v2/openproblems-v2/target/nextflow/common/get_task_info"
  executable: "/home/runner/work/openproblems-v2/openproblems-v2/target/nextflow/common/get_task_info/get_task_info"
  viash_version: "0.7.5"
  git_commit: "e5283b889123c7b1b16973ab6a6069641058b32b"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
