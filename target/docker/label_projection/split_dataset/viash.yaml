functionality:
  name: "split_dataset"
  namespace: "label_projection"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "A preprocessed dataset"
    info:
      short_description: "Preprocessed dataset"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        - type: "double"
          name: "log_cpm"
          description: "CPM normalized counts, log transformed"
        - type: "double"
          name: "log_scran_pooling"
          description: "Scran pooling normalized counts, log transformed"
        obs:
        - type: "double"
          name: "label"
          description: "Ground truth cell type labels"
        - type: "double"
          name: "batch"
          description: "Batch information"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
    example:
    - "preprocessed.h5ad"
    default: []
    must_exist: false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output_train"
    alternatives: []
    description: "The training data"
    info:
      short_description: "Training data"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        - type: "double"
          name: "log_cpm"
          description: "CPM normalized counts, log transformed"
        - type: "double"
          name: "log_scran_pooling"
          description: "Scran pooling normalized counts, log transformed"
        obs:
        - type: "string"
          name: "label"
          description: "Ground truth cell type labels"
        - type: "string"
          name: "batch"
          description: "Batch information"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
    example:
    - "training.h5ad"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output_test"
    alternatives: []
    description: "The test data (without labels)"
    info:
      short_description: "Test data"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        - type: "double"
          name: "log_cpm"
          description: "CPM normalized counts, log transformed"
        - type: "double"
          name: "log_scran_pooling"
          description: "Scran pooling normalized counts, log transformed"
        obs:
        - type: "string"
          name: "batch"
          description: "Batch information"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
    example:
    - "test.h5ad"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output_solution"
    alternatives: []
    description: "The solution for the test data"
    info:
      short_description: "Solution"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        - type: "double"
          name: "log_cpm"
          description: "CPM normalized counts, log transformed"
        - type: "double"
          name: "log_scran_pooling"
          description: "Scran pooling normalized counts, log transformed"
        obs:
        - type: "string"
          name: "label"
          description: "Ground truth cell type labels"
        - type: "string"
          name: "batch"
          description: "Batch information"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
    example:
    - "solution.h5ad"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "string"
    name: "--method"
    alternatives: []
    description: "The process method to assign train/test."
    example: []
    default:
    - "batch"
    required: false
    choices:
    - "batch"
    - "random"
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "string"
    name: "--obs_label"
    alternatives: []
    description: "Which .obs slot to use as label."
    example: []
    default:
    - "celltype"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "string"
    name: "--obs_batch"
    alternatives: []
    description: "Which .obs slot to use as batch covariate."
    example: []
    default:
    - "batch"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "integer"
    name: "--seed"
    alternatives: []
    description: "A seed for the subsampling."
    example:
    - 123
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  argument_groups: []
  resources:
  - type: "python_script"
    path: "script.py"
    is_executable: true
  test_resources:
  - type: "python_script"
    text: "import anndata as ad\nimport subprocess\nfrom os import path\n\ninput_path\
      \ = meta[\"resources_dir\"] + \"/pancreas/dataset.h5ad\"\noutput_train_path\
      \ = \"output_train.h5ad\"\noutput_test_path = \"output_test.h5ad\"\noutput_solution_path\
      \ = \"output_solution.h5ad\"\n\ncmd = [\n  meta['executable'],\n  \"--input\"\
      , input_path,\n  \"--output_train\", output_train_path,\n  \"--output_test\"\
      , output_test_path,\n  \"--output_solution\", output_solution_path\n]\n\nprint(\"\
      >> Running script as test\")\nout = subprocess.check_output(cmd).decode(\"utf-8\"\
      )\n\nprint(\">> Checking whether output file exists\")\nassert path.exists(output_train_path)\n\
      assert path.exists(output_test_path)\nassert path.exists(output_solution_path)\n\
      \nprint(\">> Reading h5ad files\")\ninput = ad.read_h5ad(input_path)\noutput_train\
      \ = ad.read_h5ad(output_train_path)\noutput_test = ad.read_h5ad(output_test_path)\n\
      output_solution = ad.read_h5ad(output_solution_path)\n\nprint(\"input:\", input)\n\
      print(\"output_train:\", output_train)\nprint(\"output_test:\", output_test)\n\
      print(\"output_solution:\", output_solution)\n\nprint(\">> Checking dimensions,\
      \ make sure no cells were dropped\")\nassert input.n_obs == output_train.n_obs\
      \ + output_test.n_obs\nassert output_test.n_obs == output_solution.n_obs\nassert\
      \ input.n_vars == output_train.n_vars\nassert input.n_vars == output_test.n_vars\n\
      \nprint(\">> Checking whether data from input was copied properly to output\"\
      )\nassert output_train.uns[\"dataset_id\"] == input.uns[\"dataset_id\"]\nassert\
      \ output_test.uns[\"dataset_id\"] == input.uns[\"dataset_id\"]\nassert output_solution.uns[\"\
      dataset_id\"] == input.uns[\"dataset_id\"]\n\nprint(\">> Check whether certain\
      \ slots exist\")\nassert \"counts\" in output_train.layers\nassert \"log_cpm\"\
      \ in output_train.layers\nassert \"log_scran_pooling\" in output_train.layers\n\
      assert \"label\" in output_train.obs\nassert \"batch\" in output_train.obs\n\
      assert \"counts\" in output_test.layers\nassert \"log_cpm\" in output_test.layers\n\
      assert \"log_scran_pooling\" in output_test.layers\nassert \"label\" not in\
      \ output_test.obs # make sure label is /not/ here\nassert \"batch\" in output_test.obs\n\
      assert \"counts\" in output_solution.layers\nassert \"log_cpm\" in output_solution.layers\n\
      assert \"log_scran_pooling\" in output_solution.layers\nassert \"label\" in\
      \ output_solution.obs\nassert \"batch\" in output_solution.obs\n\nprint(\">>\
      \ All checks succeeded!\")\n"
    dest: "generic_test.py"
    is_executable: true
  - type: "file"
    path: "../../../resources_test/common/pancreas"
  status: "enabled"
  requirements:
    commands: []
  set_wd_to_resources_dir: false
platforms: []
info:
  config: "src/label_projection/split_dataset/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/label_projection/split_dataset"
  executable: "target/docker/label_projection/split_dataset/split_dataset"
  viash_version: "0.6.3"
  git_commit: "a186905e6d311b417bdd5febfc1837300e910436"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
