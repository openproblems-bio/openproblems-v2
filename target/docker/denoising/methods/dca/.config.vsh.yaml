functionality:
  name: "dca"
  namespace: "denoising/methods"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input_train"
    alternatives: []
    description: "The training data"
    info:
      short_description: "Training data"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
    example:
    - "training.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "The denoised data"
    info:
      short_description: "Denoised data"
      slots:
        layers:
        - type: "integer"
          name: "counts"
          description: "Raw counts"
        - type: "integer"
          name: "denoised"
          description: "denoised data"
        uns:
        - type: "string"
          name: "dataset_id"
          description: "A unique identifier for the dataset"
        - type: "string"
          name: "method_id"
          description: "A unique identifier for the method"
    example:
    - "denoised.h5ad"
    default: []
    must_exist: true
    create_parent: true
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  - type: "integer"
    name: "--epochs"
    alternatives: []
    description: "Number of total epochs in training"
    example: []
    default:
    - 300
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
    dest: "par"
  argument_groups: []
  resources:
  - type: "python_script"
    path: "script.py"
    is_executable: true
  description: "Deep Count Autoencoder\n\nRemoves the dropout effect by taking the\
    \ count structure, overdispersed nature and sparsity of the data into account\
    \ \nusing a deep autoencoder with zero-inflated negative binomial (ZINB) loss\
    \ function.\n"
  test_resources:
  - type: "file"
    path: "../../../../resources_test/denoising/pancreas"
  - type: "python_script"
    text: "import anndata as ad\nimport subprocess\nfrom os import path\n\ninput_train_path\
      \ = meta[\"resources_dir\"] + \"/pancreas/train.h5ad\"\noutput_path = \"output.h5ad\"\
      \n\ncmd = [\n    meta['executable'],\n    \"--input_train\", input_train_path,\n\
      \    \"--output\", output_path\n]\n\nprint(\">> Running script as test\")\n\
      out = subprocess.run(cmd, check=True, capture_output=True, text=True)\n\nprint(\"\
      >> Checking whether output file exists\")\nassert path.exists(output_path)\n\
      \nprint(\">> Reading h5ad files\")\ninput_train = ad.read_h5ad(input_train_path)\n\
      output = ad.read_h5ad(output_path)\nprint(\"input_train:\", input_train)\nprint(\"\
      output:\", output)\n\nprint(\">> Checking whether predictions were added\")\n\
      assert \"denoised\" in output.layers\nassert meta['functionality_name'] == output.uns[\"\
      method_id\"]\n\nprint(\"Checking whether data from input was copied properly\
      \ to output\")\nassert input_train.n_obs == output.n_obs\nassert input_train.uns[\"\
      dataset_id\"] == output.uns[\"dataset_id\"]\n\nprint(\"All checks succeeded!\"\
      )"
    dest: "generic_test.py"
    is_executable: true
  info:
    type: "method"
    method_name: "DCA"
    paper_doi: "10.1038/s41467-018-07931-2"
    code_url: "https://github.com/theislab/dca"
    v1_url: "openproblems/tasks/denoising/methods/dca.py"
    v1_commit: "c2470ce02e6f196267cec1c554ba7ae389c0956a"
    variants: {}
    preferred_normalization: "counts"
  status: "enabled"
  requirements:
    commands: []
  set_wd_to_resources_dir: false
platforms:
- type: "docker"
  id: "docker"
  image: "python:3.10"
  target_organization: "openproblems-bio"
  target_registry: "ghcr.io"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  run_args: []
  target_image_source: "https://github.com/openproblems-bio/openproblems-v2"
  setup:
  - type: "python"
    user: false
    packages:
    - "anndata>=0.8"
    - "git+https://github.com/scottgigante-immunai/dca.git@patch-1"
    pip: []
    pypi: []
    git: []
    github: []
    gitlab: []
    mercurial: []
    svn: []
    bazaar: []
    url: []
    script: []
    upgrade: true
  test_setup: []
- type: "nextflow"
  id: "nextflow"
  variant: "vdsl3"
  directives:
    accelerator: {}
    conda: []
    containerOptions: []
    label:
    - "highmem"
    - "highcpu"
    module: []
    pod: []
    publishDir: []
    queue: []
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: true
    transcript: false
    publish: false
  debug: false
  container: "docker"
info:
  config: "/home/runner/work/openproblems-v2/openproblems-v2/src/denoising/methods/dca/config.vsh.yaml"
  platform: "docker"
  output: "/home/runner/work/openproblems-v2/openproblems-v2/target/docker/denoising/methods/dca"
  executable: "/home/runner/work/openproblems-v2/openproblems-v2/target/docker/denoising/methods/dca/dca"
  viash_version: "0.6.6"
  git_commit: "98473f7dea7979e178c15aceef1ea1a54fd866c6"
  git_remote: "https://github.com/openproblems-bio/openproblems-v2"
