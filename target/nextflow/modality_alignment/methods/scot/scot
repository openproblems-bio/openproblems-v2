#!/usr/bin/env bash

#########################
#    scot main_build    #
#########################

# This wrapper script is auto-generated by viash 0.5.0-rc4 and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Alex Tong (maintainer, author) {github: atong01}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
   echo "scot main_build"
echo "Run Single Cell Optimal Transport"
   echo
   echo "Options:"

echo "    -i, --input"
echo "        type: file"
echo "        default: input.h5ad"
echo "        Input h5ad file containing at least \`ad.X\` and \`ad.obsm['mode2']\`."
echo ""


echo "    -o, --output"
echo "        type: file, output"
echo "        default: output.scot.h5ad"
echo "        Output h5ad file containing both RNA and ADT data"
echo ""


echo "    --n_svd"
echo "        type: integer"
echo "        default: 100"
echo "        Number of SVDs to use. Bounded by the number of columns in \`ad.X\` and \`ad.obsm['mode2']\`."
echo ""


echo "    --balanced"
echo "        type: boolean_true"
echo "        Determines whether balanced or unbalanced optimal transport. In the balanced case, the target and source distributions are assumed to have equal mass."
echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "scot main_build"
            exit
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -i)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --n_svd)
            VIASH_PAR_N_SVD="$2"
            shift 2
            ;;
        --n_svd=*)
            VIASH_PAR_N_SVD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --balanced)
            VIASH_PAR_BALANCED=true
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



if [ -z "$VIASH_PAR_INPUT" ]; then
  VIASH_PAR_INPUT="input.h5ad"
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_PAR_OUTPUT="output.scot.h5ad"
fi
if [ -z "$VIASH_PAR_N_SVD" ]; then
  VIASH_PAR_N_SVD="100"
fi
if [ -z "$VIASH_PAR_BALANCED" ]; then
  VIASH_PAR_BALANCED="false"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-scot-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'$VIASH_PAR_INPUT'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo None; fi ),
  'n_svd': $( if [ ! -z ${VIASH_PAR_N_SVD+x} ]; then echo "int('$VIASH_PAR_N_SVD')"; else echo None; fi ),
  'balanced': $( if [ ! -z ${VIASH_PAR_BALANCED+x} ]; then echo "'$VIASH_PAR_BALANCED'.lower() == 'true'"; else echo None; fi )
}

resources_dir = '$VIASH_RESOURCES_DIR'

## VIASH START
## VIASH END

print("Loading dependencies")
import scanpy as sc
import sklearn.decomposition
from SCOT import SCOT

# importing helper functions from common preprocessing.py file in resources dir
import sys
sys.path.append(resources_dir)
from preprocessing import log_cpm
from preprocessing import sqrt_cpm


print("Reading input h5ad file")
adata = sc.read_h5ad(par["input"])

print("Normalising mode 1")
sqrt_cpm(adata)

print("Normalising mode 2")
log_cpm(adata, obsm="mode2", obs="mode2_obs", var="mode2_var")


print("Performing PCA reduction")
n_svd = min([par["n_svd"], min(adata.X.shape) - 1, min(adata.obsm["mode2"].shape) - 1])
X_pca = sklearn.decomposition.TruncatedSVD(n_svd).fit_transform(adata.X)
Y_pca = sklearn.decomposition.TruncatedSVD(n_svd).fit_transform(adata.obsm["mode2"])

print("Initialize SCOT")
scot = SCOT(X_pca, Y_pca)

print("Call the unbalanced alignment")
# From https://github.com/rsinghlab/SCOT/blob/master/examples/unbalanced_GW_SNAREseq.ipynb # noqa: 501
X_new_unbal, y_new_unbal = scot.align(
    k=50, e=1e-3, rho=0.0005, normalize=True, balanced=par["balanced"]
)

print()
adata.obsm["aligned"] = X_new_unbal
adata.obsm["mode2_aligned"] = y_new_unbal

print("Write output to file")
adata.uns["method_id"] = "scot"
adata.write(par["output"], compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

python "\$tempscript"

VIASHEOF
